{"version":3,"sources":["components/Header.js","components/Button.js","components/AlgorithmSelect.js","components/Box.js","components/Board.js","components/Settings.js","AlgorithmLib/utils.js","AlgorithmLib/BFS.js","AlgorithmLib/DFS.js","AlgorithmLib/Dijkstras.js","AlgorithmLib/A_star.js","Algorithms.js","components/SubHeader.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Button","color","text","onClick","style","backgroundColor","defaultProps","console","log","AlgorithmSelect","onChange","id","evt","target","value","Box","row","col","useState","toggleState","currColor","document","getElementById","initBoard","rows","i","maxRow","cells","j","maxCol","startPos","push","endPos","Board","cellSpacing","cellPadding","Settings","nameToAlgs","selectedAlg","changeSelectedAlg","alg","box","getAdjacent","startRow","startCol","soFar","lst","addToQueue","getRowFromId","index","num","charAt","parseInt","getColFromId","search","substring","getElementByPos","queue","asList","includes","sleep","ms","Promise","resolve","setTimeout","display","path","a","length","pathMS","BFSRun","endRow","endCol","marked","visited","firstBox","shift","node","forEach","newPath","slice","DFSHelper","adjacents","pathCopy","DFSRun","DFSPath","DijkstrasRun","A_star_run","Dijkstras","A_star","DFS","BFS","SubHeader","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fba0eb35.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <h1>Path Visualizer</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\n// CSS in JS\r\n// const headingStyle = {\r\n//     color: 'red',\r\n//     backgroundColor: 'black'\r\n// }\r\nexport default Header\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Button = ( {color, text, onClick} ) => {\r\n    return (\r\n        <button style={{backgroundColor: color}} className='btn' \r\n            onClick={onClick}>{text}</button>\r\n    )\r\n}\r\n\r\nButton.defaultProps = {\r\n    color: 'black', \r\n    text: 'Button',\r\n    onClick: () => console.log('nothing happened'),\r\n}\r\n\r\nButton.propTypes = {\r\n    color: PropTypes.string,\r\n    text: PropTypes.string,\r\n    onClick: PropTypes.func\r\n}\r\n\r\nexport default Button\r\n","import {React, useState} from 'react'\r\n\r\nconst AlgorithmSelect = ( { color, onChange } ) => {\r\n\r\n\r\n    return (\r\n        <select className='slct' id='algorithms' style={{backgroundColor: color}}\r\n            onChange={(evt) => onChange(evt.target.value)} >\r\n            <option value=\"DI\">Dijkstra's (unavailable)</option>\r\n            <option value=\"A*\">A* (unavailable)</option>\r\n            <option value=\"DFS\">Depth First Search</option>\r\n            <option value=\"BFS\">Breadth First Search</option>\r\n        </select>\r\n    )\r\n}\r\n\r\nAlgorithmSelect.defaultProps = {\r\n    color: 'black',\r\n    onChange: console.log(\"nothing happened\")\r\n}\r\n\r\nexport default AlgorithmSelect\r\n","import {React, useState} from 'react';\r\n\r\nconst Box = ({row, col, color}) => {\r\n\r\n    var [_, toggleState] = useState(false);\r\n\r\n\r\n    toggleState = () => {\r\n        let currColor = document.getElementById(`${row}-${col}`).style.backgroundColor;\r\n        // if (selectingBegin) {\r\n        //     let startBox = document.getElementById(`${startPos[0]}-${startPos[1]}`);\r\n        //     startBox.style.backgroundColor = \"white\";\r\n        //     startPos = [row, col];\r\n        if (currColor === \"white\") {\r\n            document.getElementById(`${row}-${col}`).style.backgroundColor = \"black\";\r\n        } else if (currColor === \"black\") {\r\n            document.getElementById(`${row}-${col}`).style.backgroundColor = \"white\";\r\n        }\r\n    }\r\n\r\n    return (\r\n        <td \r\n            className=\"box\" \r\n            id={row + \"-\" + col}\r\n            style={{backgroundColor: color}} \r\n            onClick={ toggleState } \r\n            >\r\n        </td>\r\n    )\r\n}\r\n\r\nBox.defaultProps = {\r\n    color: 'white'\r\n}\r\n\r\nexport default Box\r\n","import React from 'react'\r\nimport Box from './Box'\r\nimport {startPos, endPos, startingIcon} from './Settings';\r\n\r\nexport const maxRow = 16;\r\nexport const maxCol = 50;\r\n\r\nfunction initBoard() {\r\n    let rows = [];\r\n    for(var i = 0; i < maxRow + 1; i++){\r\n        let cells = []\r\n        for(var j = 0; j < maxCol + 1; j++) {\r\n            if (i === startPos[0] && j === startPos[1]) {\r\n                cells.push(<Box row={i} col={j} color=\"green\"/>);\r\n            } else if (i === endPos[0] && j === endPos[1]) {\r\n                cells.push(<Box row={i} col={j} color=\"red\"/>);\r\n            } else {\r\n                cells.push(<Box row={i} col={j} />);\r\n            }\r\n        }\r\n        rows.push(<tr>{cells}</tr>);\r\n    }\r\n    \r\n    return rows;\r\n}\r\n\r\nconst Board = () => {\r\n    return (\r\n        <table className=\"board\" cellSpacing=\"0\" cellPadding=\"0\">\r\n            <tbody>\r\n                {initBoard()}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Board;\r\n","import {React, useState} from 'react';\r\nimport Button from './Button';\r\nimport AlgorithmSelect from './AlgorithmSelect';\r\nimport { FaTimes } from 'react-icons/fa';\r\nimport {maxRow, maxCol} from './Board';\r\nexport var startPos = [8, 8];\r\nexport var endPos = [8, 42];\r\nexport var startingIcon = <FaTimes style={{color: 'red', cursor: 'pointer'}}/>\r\n\r\n\r\nconst Settings = ({nameToAlgs}) => {\r\n\r\n    var [selectedAlg, changeSelectedAlg] = useState('DI'); \r\n                                           // TODO: get the first option instead, \r\n                                           // needs to wait after construction\r\n\r\n    changeSelectedAlg = (alg) => {\r\n        selectedAlg = alg;\r\n        console.log('algorithm changed to: ' + alg);\r\n    }\r\n\r\n    const getSelectedAlg = () => {\r\n        return nameToAlgs[selectedAlg];\r\n    }\r\n\r\n    const clear = () => {\r\n        for (let row = 0; row <= maxRow; row++) {\r\n            for (let col = 0; col <= maxCol; col++) {\r\n                let box = document.getElementById(`${row}-${col}`);\r\n                if (row === startPos[0] && col === startPos[1]) {\r\n                    box.style.backgroundColor = \"green\";\r\n                } else if (row === endPos[0] && col === endPos[1]) {\r\n                    box.style.backgroundColor = \"red\";\r\n                } else {\r\n                    box.style.backgroundColor = \"white\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <AlgorithmSelect onChange={changeSelectedAlg} />\r\n            {/* <Button color='purple' text=\"Change Start\"/> \r\n            <Button color='purple' text=\"Change End\"/> */}  {/* To be deployed later*/}\r\n            <Button color='blue' text=\"Clear\" onClick={clear} />\r\n            <Button color='red' text=\"Stop (unavailable)\"/>  {/* To be deployed later*/}\r\n            <Button color='green' text=\"Run\" onClick={() => {\r\n                getSelectedAlg()(startPos[0], startPos[1], endPos[0], endPos[1])}\r\n            }/>\r\n        </div>\r\n    )\r\n}\r\n\r\n//TODO: {algorithm} must be function\r\n\r\nexport default Settings;\r\n","import {maxRow, maxCol} from '../components/Board';\r\n\r\n\r\n\r\nexport function getAdjacent(startRow, startCol, soFar) {\r\n    /* Orientation:\r\n            A\r\n        D start B\r\n            C\r\n    A -> B -> C -> D\r\n    */\r\n    let lst = [];\r\n    addToQueue(lst, startRow - 1, startCol, soFar, false);\r\n    addToQueue(lst, startRow, startCol + 1, soFar, false);\r\n    addToQueue(lst, startRow + 1, startCol, soFar, false);\r\n    addToQueue(lst, startRow, startCol - 1, soFar, false);\r\n    return lst;\r\n}\r\n\r\nexport function getRowFromId(id) {\r\n    let index = 0;\r\n    let num = '';\r\n    while (id.charAt(index) != '-') {\r\n        num += id.charAt(index);\r\n        index++;\r\n    }\r\n    return parseInt(num);\r\n}\r\n\r\n\r\nexport function getColFromId(id) {\r\n    let index = id.search('-');\r\n    return parseInt(id.substring(index + 1));\r\n}\r\n\r\n\r\nexport function getElementByPos(row, col) {\r\n    return document.getElementById(`${row}-${col}`); \r\n}\r\n\r\nfunction addToQueue(queue, row, col, soFar, asList) {\r\n    if (row < 0 || row > maxRow) { return; }\r\n    if (col < 0 || col > maxCol) { return; }\r\n    let box = getElementByPos(row, col);\r\n    if (!soFar.includes(box) && box.style.backgroundColor != \"black\") {\r\n        if (asList) {\r\n            queue.push([box]);\r\n        } else {\r\n            queue.push(box);\r\n        }\r\n    }\r\n}\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport async function display(queue, path) {\r\n    let ms = 0;\r\n    for (let i = 0; i < queue.length; i++) {\r\n        if (queue[i].style.backgroundColor === \"white\") {  // don't override green or red\r\n            queue[i].style.backgroundColor = \"blue\";\r\n        }\r\n        await sleep(ms);\r\n    }\r\n    let pathMS = 20;\r\n    for (let i = 0; i < path.length; i++) {\r\n        path[i].style.backgroundColor = \"yellow\";\r\n        await sleep(pathMS);\r\n    }\r\n    console.log('Displayed');\r\n}\r\n\r\n","import {getAdjacent, getRowFromId, getColFromId, getElementByPos, display} from './utils';\r\n\r\nfunction BFSRun(startRow, startCol, endRow, endCol) {\r\n    let queue = [];\r\n    let marked = []; // marked will include boxes from scouting adjacents (for performance)\r\n    let visited = []; // visited will not include boxes from scouting adjacents\r\n                     // (so that BFS will stop and not look at adjacents at last node)\r\n    let firstBox = getElementByPos(startRow, startCol)\r\n    queue.push([firstBox]);\r\n    marked.push(firstBox);\r\n    while (queue.length != 0) {\r\n        let path = queue[0];\r\n        queue.shift();\r\n        let node = path[path.length - 1];\r\n        visited.push(node);\r\n        startRow = getRowFromId(node.id);\r\n        startCol = getColFromId(node.id);\r\n        if (startRow === endRow && startCol === endCol) {\r\n            display(visited, path);\r\n            break;\r\n        }\r\n        let adjacents = getAdjacent(startRow, startCol, marked);\r\n        adjacents.forEach(box => {\r\n            let newPath = path.slice();\r\n            newPath.push(box);\r\n            queue.push(newPath);\r\n            marked.push(box);\r\n        });\r\n    }\r\n    display(visited, []);\r\n}\r\n\r\nexport default BFSRun;","import {getAdjacent, getRowFromId, getColFromId, getElementByPos, display} from './utils';\r\n\r\n\r\nvar visited = [];\r\nfunction DFSRun(startRow, startCol, endRow, endCol) {\r\n    let DFSPath = DFSHelper(startRow, startCol, endRow, endCol, []);\r\n    DFSPath ? display(visited, DFSPath) : display(visited, []);\r\n    resetDFS();\r\n}\r\n\r\nfunction DFSHelper(startRow, startCol, endRow, endCol, path) {\r\n    let node = getElementByPos(startRow, startCol)\r\n    visited.push(node);\r\n    path.push(node);\r\n    if (startRow === endRow && startCol === endCol) { return path; }\r\n    let adjacents = getAdjacent(startRow, startCol, visited);\r\n    if (!adjacents.length) { return null; }\r\n    for (let i = 0; i < adjacents.length; i++) { // return in for each doesn't end the loop...\r\n        let pathCopy = path.slice();\r\n        let row = getRowFromId(adjacents[i].id);\r\n        let col = getColFromId(adjacents[i].id);\r\n        let newPath = DFSHelper(row, col, endRow, endCol, pathCopy);\r\n        if (newPath) {\r\n            return newPath;\r\n        }\r\n    };\r\n}\r\n\r\nfunction resetDFS() {\r\n    visited = [];\r\n}\r\n\r\nexport default DFSRun;","import {getAdjacent, getRowFromId, getColFromId, getElementByPos, display} from './utils';\r\n\r\nfunction DijkstrasRun(startRow, startCol, endRow, endCol) {\r\n\r\n}\r\n\r\nexport default DijkstrasRun;","import {getAdjacent, getRowFromId, getColFromId, getElementByPos, display} from './utils';\r\n\r\nfunction A_star_run(startRow, startCol, endRow, endCol) {\r\n\r\n}\r\n\r\nexport default A_star_run;","import BFSRun from './AlgorithmLib/BFS';\r\nimport DFSRun from './AlgorithmLib/DFS';\r\nimport DijkstrasRun from './AlgorithmLib/Dijkstras';\r\nimport A_star_run from './AlgorithmLib/A_star';\r\nvar running = false;\r\n\r\nexport function Dijkstras(startRow, startCol, endRow, endCol) {\r\n    running = true;\r\n    console.log(\"Running Dijkstras\");\r\n    DijkstrasRun(startRow, startCol, endRow, endCol)\r\n    running = false;\r\n}\r\n\r\nexport function A_star(startRow, startCol, endRow, endCol) {\r\n    running = true;\r\n    console.log(\"Running A*\");\r\n    A_star_run(startRow, startCol, endRow, endCol);\r\n    running = false;\r\n}\r\n\r\n\r\nexport function DFS(startRow, startCol, endRow, endCol) {\r\n    running = true;\r\n    console.log(\"Running DFS\");\r\n    DFSRun(startRow, startCol, endRow, endCol);\r\n    running = false;\r\n}\r\n\r\n\r\nexport function BFS(startRow, startCol, endRow, endCol) {\r\n    running = true;\r\n    console.log(\"Running BFS\");\r\n    BFSRun(startRow, startCol, endRow, endCol);\r\n    running = false;\r\n}\r\n","import React from 'react'\r\n\r\nconst SubHeader = ({ text, color }) => {\r\n    return (\r\n        <header className=\"subheader\" style={{color: color}}>\r\n            <h4>{text}</h4>\r\n        </header>\r\n    )\r\n}\r\n\r\nSubHeader.defaultProps = {\r\n    color: 'black',\r\n    text: ''\r\n}\r\n\r\nexport default SubHeader;\r\n","import Header from './components/Header';\nimport Settings from './components/Settings';\nimport Board from './components/Board';\nimport {DFS, BFS, Dijkstras, A_star} from './Algorithms';\nimport SubHeader from './components/SubHeader';\n\nfunction App() {\n\n  const nameToAlgs = {\n    \"DI\": Dijkstras,\n    \"DFS\": DFS,\n    \"BFS\": BFS,\n    \"A*\": A_star\n  }\n\n  return ( // Has to return SINGLE element\n    <div className=\"App\">\n      <Header/>\n      <SubHeader text=\"Page is currently under construction. Some features will be unavailable.\" \n        color=\"purple\"/>\n      <Settings nameToAlgs={nameToAlgs} />\n      <SubHeader text=\"Click on boxes to create walls!\" color=\"black\" />\n      <Board/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}