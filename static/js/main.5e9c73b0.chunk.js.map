{"version":3,"sources":["components/Header.js","components/Select.js","components/Orientations.js","components/Box.js","components/Board.js","AlgorithmLib/utils.js","AlgorithmLib/BFS.js","AlgorithmLib/DFS.js","AlgorithmLib/A_star.js","AlgorithmLib/Dijkstras.js","AlgorithmLib/GreedyBFS.js","Engine.js","components/Button.js","components/CheckBox.js","components/Controls.js","components/Slider.js","components/Settings.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","AlgorithmSelect","color","onChange","id","style","backgroundColor","evt","target","value","OrientationSelect","selected","number","defaultValue","defaultProps","Orientations","isMouseDown","Box","row","col","canDrawOn","toggleState","box","document","getElementById","hasBackgroundColor","setBackgroundColor","onMouseDown","e","preventDefault","handleMouseDown","onMouseUp","onMouseEnter","Board","cellSpacing","cellPadding","rows","i","maxRow","cells","j","maxCol","startPos","push","endPos","initBoard","defaultOrientation","getAdjacent","startRow","startCol","soFar","orientationalJson","getKeyByValue","object","Object","keys","find","key","oriToRowCol","lst","coords","addToQueue","orientationListToJson","orientationList","json","length","getRowFromId","index","num","charAt","parseInt","getColFromId","search","substring","getElementByPos","biasManhattan","targetBox","row1","col1","row2","col2","Math","abs","queue","asList","includes","getAllBoxes","cols","BFSRun","endRow","endCol","marked","visited","firstBox","path","shift","node","forEach","newPath","slice","DFSRun","DFSPath","DFSHelper","adjacents","pathCopy","AStarRelax","heuristic","distTo","stack","adj","newAdjDist","sort","path1","path2","A_star_run","relax","source","allBoxes","Infinity","box1","box2","DijkstrasRun","greedyRelax","GreedyRun","undefined","Engine","chosenAlg","orientationOrdered","displayFancy","this","chosenAlgorithm","engineIsRunning","algorithm","a","queues","display","sleep","overlapDisplay","r","g","b","ms","Promise","resolve","setTimeout","pathMS","Button","text","onClick","console","log","CheckBox","handleCheck","useState","isChecked","toggleCheck","type","for","Controls","blueClick","redClick","greenClick","checkClick","Slider","min","max","class","nameToAlgs","Settings","blueFunc","redFunc","greenFunc","selectedAlg","setSelectedAlg","setOrientation","willDisplayFancy","toggleFancy","alg","orientation","boxChecked","App","engine","setEngine","oriList","window","scrollTo","top","body","scrollHeight","behavior","isRunning","run","useEffect","newEngine","func","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5e9c73b0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <h1>Pathfind Visualizer</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\n// CSS in JS\r\n// const headingStyle = {\r\n//     color: 'red',\r\n//     backgroundColor: 'black'\r\n// }\r\nexport default Header\r\n","import {React} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const AlgorithmSelect = ( { color, onChange } ) => {\r\n\r\n\r\n    return (\r\n        <span className=\"span-alg-slct\" >\r\n            <select className='alg-slct' id='algorithms' style={{backgroundColor: color}}\r\n                onChange={(evt) => onChange(evt.target.value)} >\r\n                <option value=\"DI\">Dijkstra's</option>\r\n                <option value=\"A*\">A* (Best First Search)</option>\r\n                <option value=\"DFS\">Depth First Search</option>\r\n                <option value=\"BFS\">Breadth First Search</option>\r\n                <option value=\"GREEDY\">Greedy Best First Search</option>\r\n            </select>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport const OrientationSelect = ( { color, selected, number, onChange } ) => {\r\n    \r\n    return (\r\n        <select className='ori-slct' id={`orientation-${number}`} style={{backgroundColor: color}} \r\n            defaultValue={selected} onChange={(evt) => onChange(evt.target.value, number)}>\r\n            <option value=\"N\">North</option>\r\n            <option value=\"E\">East</option>\r\n            <option value=\"S\">South</option>\r\n            <option value=\"W\">West</option>\r\n        </select>\r\n    )\r\n}\r\n\r\nAlgorithmSelect.defaultProps = {\r\n    color: 'black'\r\n}\r\n","import React from 'react';\r\nimport {OrientationSelect} from './Select';\r\n\r\nconst Orientations = ({onChange}) => {\r\n    return (\r\n        <span className=\"orientations\">\r\n            <span className=\"circle-number\">1</span>\r\n            <OrientationSelect color=\"#008080\" selected=\"N\" number='1' onChange={onChange} />\r\n            <span className=\"circle-number\">2</span>\r\n            <OrientationSelect color=\"#008080\" selected=\"E\" number='2' onChange={onChange} />\r\n            <span className=\"circle-number\">3</span>\r\n            <OrientationSelect color=\"#008080\" selected=\"S\" number='3' onChange={onChange} />\r\n            <span className=\"circle-number\">4</span>\r\n            <OrientationSelect color=\"#008080\" selected=\"W\" number='4' onChange={onChange} />  \r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Orientations;\r\n","import {React, useState} from 'react';\r\nimport {hasBackgroundColor, setBackgroundColor} from '../AlgorithmLib/utils';\r\n\r\nvar isMouseDown = false;\r\nconst Box = ({row, col, color, canDrawOn}) => {\r\n\r\n    var handleMouseDown = (e) => {\r\n        e.preventDefault();\r\n        if (canDrawOn()) {\r\n            isMouseDown = true;\r\n            toggleState();\r\n        }\r\n    }\r\n\r\n    var handleMouseUp = (e) => {\r\n        isMouseDown = false;\r\n    }\r\n\r\n    var toggleState = () => {\r\n        let box = document.getElementById(`${row}-${col}`)\r\n        if (hasBackgroundColor(box, \"white\")) {\r\n            setBackgroundColor(box, \"black\");\r\n        } else if (hasBackgroundColor(box, \"black\")) {\r\n            setBackgroundColor(box, \"white\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <td \r\n            className=\"box\" \r\n            id={row + \"-\" + col}\r\n            style={{backgroundColor: color}} \r\n            onMouseDown={ (e) => handleMouseDown(e) }   \r\n            onMouseUp={ (e) =>  handleMouseUp(e) }\r\n            onMouseEnter={ (e) => { if (isMouseDown) toggleState(); } }\r\n            >\r\n        </td>\r\n    )\r\n}\r\n\r\nBox.defaultProps = {\r\n    color: 'white',\r\n    canDrawOn: function(e) { e.preventDefault(); return false; }\r\n}\r\n\r\nexport default Box\r\n","import React from 'react';\r\nimport Box from './Box';\r\nimport {startPos, endPos, startingIcon} from './Settings';\r\n\r\nexport const maxRow = 20;\r\nexport const maxCol = 55;\r\n\r\n\r\nconst Board = ( { canDrawOn } ) => {\r\n\r\n    function initBoard() {\r\n        let rows = [];\r\n        for(var i = 0; i < maxRow + 1; i++) {\r\n            let cells = [];\r\n            for(var j = 0; j < maxCol + 1; j++) {\r\n                if (i === startPos[0] && j === startPos[1]) {\r\n                    cells.push(<Box row={i} col={j} color=\"green\"/>);\r\n                } else if (i === endPos[0] && j === endPos[1]) {\r\n                    cells.push(<Box row={i} col={j} color=\"red\" />);\r\n                } else {\r\n                    cells.push(<Box row={i} col={j} canDrawOn={canDrawOn} />);\r\n                }\r\n            }\r\n            rows.push(<tr>{cells}</tr>);\r\n        }\r\n        return rows;\r\n    }\r\n\r\n    return (\r\n        <table className=\"board\" cellSpacing=\"0\" cellPadding=\"0\">\r\n            <tbody>\r\n                {initBoard()}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Board;\r\n","import {maxRow, maxCol} from '../components/Board';\r\n\r\nvar numOrientations = 4;\r\nvar defaultOrientation = {\r\n    'N': 1,\r\n    'E': 2,\r\n    'S': 3,\r\n    'W': 4\r\n}\r\n\r\nexport function hasBackgroundColor(box, color) {\r\n    return box.style.backgroundColor === color;\r\n}\r\n\r\nexport function setBackgroundColor(box, color) {\r\n    box.style.backgroundColor = color;\r\n}\r\n\r\nexport function getAdjacent(startRow, startCol, soFar, orientationalJson) {\r\n    /* Orientation:\r\n            A\r\n        D start B\r\n            C\r\n    A -> B -> C -> D\r\n    */\r\n   /* If invalid orientation, then orientation is NESW */\r\n   function getKeyByValue(object, value) {\r\n    return Object.keys(object).find(key => object[key] === value);\r\n    }\r\n  \r\n    var oriToRowCol = {\r\n        'N': [startRow - 1, startCol],\r\n        'E': [startRow, startCol + 1],\r\n        'S': [startRow + 1, startCol],\r\n        'W': [startRow, startCol - 1]\r\n    }\r\n    let lst = [];\r\n    for (let i = 1; i <= numOrientations; i++) {\r\n        let ori = getKeyByValue(orientationalJson, i);\r\n        let coords = oriToRowCol[ori];\r\n        addToQueue(lst, coords[0], coords[1], soFar, false);\r\n    }\r\n    return lst;\r\n}\r\n\r\nexport function orientationListToJson(orientationList) {\r\n    let json = []\r\n    for (let i = 1; i <= orientationList.length; i++) {\r\n        json[orientationList[i - 1]] = i;\r\n    }\r\n    if (Object.keys(json).length < numOrientations) {\r\n        return defaultOrientation;\r\n    } else {\r\n        return json;\r\n    }\r\n}\r\n\r\nexport function getRowFromId(id) {\r\n    let index = 0;\r\n    let num = '';\r\n    while (id.charAt(index) != '-') {\r\n        num += id.charAt(index);\r\n        index++;\r\n    }\r\n    return parseInt(num);\r\n}\r\n\r\n\r\nexport function getColFromId(id) {\r\n    let index = id.search('-');\r\n    return parseInt(id.substring(index + 1));\r\n}\r\n\r\n\r\nexport function getElementByPos(row, col) {\r\n    return document.getElementById(`${row}-${col}`); \r\n}\r\n\r\n// TODO: try weight stuff\r\nexport function getDist(box1, box2) {\r\n    if (distBetweenBoxes(box1, box2) != 1) {\r\n        return null; // not connected\r\n    }\r\n    return 1;\r\n}\r\n\r\n/* Bias in wanting puts more weight on difference in rows */\r\nexport function biasManhattan(box, targetBox) {\r\n    let row1 = getRowFromId(box.id);\r\n    let col1 = getColFromId(box.id);\r\n    let row2 = getRowFromId(targetBox.id);\r\n    let col2 = getColFromId(targetBox.id);\r\n    return 2*(Math.abs(col2 - col1) + 5*Math.abs(row2 - row1)); \r\n    // scaled by 3 for better results\r\n}\r\n\r\n\r\nexport function distBetweenIds(id1, id2) {\r\n    let row1 = getRowFromId(id1);\r\n    let col1 = getColFromId(id1);\r\n    let row2 = getRowFromId(id2);\r\n    let col2 = getColFromId(id2);\r\n    return Math.sqrt((row1 - row2)**2 + (col1 - col2)**2);\r\n}\r\n\r\n\r\nexport function distBetweenBoxes(box1, box2) {\r\n    let id1 = box1.id;\r\n    let id2 = box2.id;\r\n    let row1 = getRowFromId(id1);\r\n    let col1 = getColFromId(id1);\r\n    let row2 = getRowFromId(id2);\r\n    let col2 = getColFromId(id2);\r\n    return Math.sqrt((row1 - row2)**2 + (col1 - col2)**2);\r\n}\r\n\r\n\r\nfunction addToQueue(queue, row, col, soFar, asList) {\r\n    if (row < 0 || row > maxRow) { return; }\r\n    if (col < 0 || col > maxCol) { return; }\r\n    let box = getElementByPos(row, col);\r\n    if (!soFar.includes(box) && box.style.backgroundColor != \"black\") {\r\n        if (asList) {\r\n            queue.push([box]);\r\n        } else {\r\n            queue.push(box);\r\n        }\r\n    }\r\n}\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\n/* Also in Engine class */\r\nexport async function display(queue, path) {\r\n    let ms = 0;\r\n    let r = 64\r\n    let g = 224;\r\n    let b = 208\r\n    for (let i = 0; i < queue.length; i++) {\r\n        if (hasBackgroundColor(queue[i], \"white\")) {  // don't override green or red\r\n            setBackgroundColor(queue[i], `rgb(${r}, ${g}, ${b})`);\r\n            setTimeout(function () { overlapDisplay(queue[i], r - 1, g - 3, b - 3); }, 500);\r\n        }\r\n        await sleep(ms);\r\n    }\r\n    let pathMS = 20;\r\n    for (let i = 0; i < path.length; i++) {\r\n        setBackgroundColor(path[i], \"yellow\");\r\n        await sleep(pathMS);\r\n    }\r\n    console.log('Displayed');\r\n}\r\n\r\n\r\n/* rgb(64, 187, 224), rgb(56, 164, 197), rgb(48, 134, 160), rgb(48, 106, 160); */\r\nasync function overlapDisplay(box, r, g, b) {\r\n    if (r < 20 || g <= 50 || b <= 50 || hasBackgroundColor(box, \"yellow\")) {\r\n        return;\r\n    }\r\n    box.style.backgroundColor = `rgb(${r}, ${g}, ${b})`;\r\n    await sleep(100);\r\n    await overlapDisplay(box, r - 2, g - 6, b - 6);\r\n}\r\n\r\nexport function getAllBoxes() {\r\n    let rows = [];\r\n    for (let row = 0; row <= maxRow; row++) {\r\n        let cols = []\r\n        for (let col = 0; col <= maxCol; col++) {\r\n            cols.push(document.getElementById(`${row}-${col}`));\r\n        }\r\n        rows.push(cols);\r\n    }\r\n    return rows;\r\n} \r\n\r\n/* Deprecated MinHeap, maybe will be used later\r\nexport class MinHeap {\r\n    constructor(boxes, sourceBox) {\r\n        this.arrayRep = [null]; // 0th position is sentinel\r\n        this.sourceBox = sourceBox;\r\n        boxes.forEach(box => {\r\n            let node = new Node(box, sourceBox);\r\n            if (node === sourceBox) {\r\n                this.arrayRep = [null, node].concat(this.arrayRep.subarray(1, this.arrayRep.length));\r\n            }\r\n            this.addNode(new Node(box, sourceBox));\r\n        });\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.arrayRep.length < 2;\r\n    }\r\n\r\n    compareNodes(node1, node2) {\r\n        return node1.distTo - node2.distTo;\r\n    }\r\n\r\n    parentIndex(index) {\r\n        return parseInt(index / 2);\r\n    }\r\n\r\n    parent(index) {\r\n        return this.parentIndex(index) < 1 ? \r\n                null : this.arrayRep[this.parentIndex(index)];\r\n    }\r\n\r\n    rightChildIndex(index) {\r\n        return index * 2 + 1;\r\n    }\r\n\r\n    rightChild(index) {\r\n        return index * 2 + 1 >= this.arrayRep.length ? \r\n                null : this.arrayRep[this.rightChildIndex(index)];\r\n    }\r\n\r\n    leftChildIndex(index) {\r\n        return index * 2;\r\n    }\r\n\r\n    leftChild(index) {\r\n        return index * 2 >= this.arrayRep.length ? \r\n                null : this.arrayRep[this.leftChildIndex(index)];\r\n    }\r\n\r\n    // Node added to end of arrayRep, swims up //\r\n    addNode(node) {\r\n        this.arrayRep.push(node);\r\n        let k = this.arrayRep.length - 1;\r\n        while (this.parent(k) \r\n                && this.compareNodes(this.parent(k), node) > 0) { // node has lower distTo\r\n            let newIndex = this.parentIndex(k);\r\n            let prevParent = this.parent(k);\r\n            this.arrayRep[newIndex] = node;\r\n            this.arrayRep[k] = prevParent;\r\n            k = newIndex;\r\n        }\r\n    }\r\n\r\n    addBox(box) {\r\n        let node = new Node(box, this.sourceBox);\r\n        this.addNode(node);\r\n    }\r\n\r\n    popSmallest() {\r\n        if (!this.isEmpty) {\r\n            let smallest = this.arrayRep[1];\r\n            this.arrayRep[1] = this.arrayRep[this.arrayRep.length - 1];\r\n            this.arrayRep.pop();\r\n            this.sink(1);\r\n            return smallest;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    sink(index) {\r\n        let node = this.arrayRep[index];\r\n        let leftIndex = this.leftChildIndex(index);\r\n        let rightIndex = this.rightChildIndex(index);\r\n        let left = this.leftChild(index);\r\n        let right = this.rightChild(index)\r\n        if (left && right) {\r\n            if (this.compareNodes(node, left) <= 0 && this.compareNodes(node, right) <= 0) {\r\n                return;\r\n            }\r\n            let cp = this.compareNodes(left, right);\r\n            if (cp <= 0) {\r\n                // sink to the left\r\n                this.arrayRep[leftIndex] = node;\r\n                this.arrayRep[index] = left;\r\n                this.sink(leftIndex);\r\n            } else {\r\n                // sink to the right\r\n                this.arrayRep[rightIndex] = node;\r\n                this.arrayRep[index] = right;\r\n                this.sink(rightIndex);\r\n            }\r\n        } else if (left) {\r\n            let cp = this.compareNodes(node, left);\r\n            if (cp <= 0) {\r\n                return;\r\n            } else {\r\n                // sink to the left\r\n                this.arrayRep[leftIndex] = node;\r\n                this.arrayRep[index] = left;\r\n                this.sink(leftIndex);\r\n            }\r\n        } else if (right) {\r\n            let cp = this.compareNodes(node, right);\r\n            if (cp <= 0) {\r\n                return;\r\n            } else {\r\n                // sink to the left\r\n                this.arrayRep[rightIndex] = node;\r\n                this.arrayRep[index] = right;\r\n                this.sink(rightIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport class Node {\r\n    constructor(box, sourceBox) {\r\n        this.box = box;\r\n        this.sourceBox = sourceBox;\r\n        this.distTo = box === sourceBox ? 0 :Infinity;\r\n    }\r\n}\r\n\r\n*/\r\n","import {getAdjacent, getRowFromId, getColFromId, getElementByPos, display} from './utils';\r\n\r\nfunction BFSRun(startRow, startCol, endRow, endCol, orientationList) {\r\n    let queue = [];\r\n    let marked = []; // marked will include boxes from scouting adjacents (for performance)\r\n    let visited = []; // visited will not include boxes from scouting adjacents\r\n                     // (so that BFS will stop and not look at adjacents at last node)\r\n    let firstBox = getElementByPos(startRow, startCol)\r\n    queue.push([firstBox]);\r\n    marked.push(firstBox);\r\n    while (queue.length != 0) {\r\n        let path = queue[0];\r\n        queue.shift();\r\n        let node = path[path.length - 1];\r\n        visited.push(node);\r\n        startRow = getRowFromId(node.id);\r\n        startCol = getColFromId(node.id);\r\n        if (startRow === endRow && startCol === endCol) {\r\n            return {\"visited\": visited, \"path\": path};\r\n        }\r\n        let adjacents = getAdjacent(startRow, startCol, marked, orientationList);\r\n        adjacents.forEach(box => {\r\n            let newPath = path.slice();\r\n            newPath.push(box);\r\n            queue.push(newPath);\r\n            marked.push(box);\r\n        });\r\n    }\r\n    return {\"visited\": visited, \"path\": []};\r\n}\r\n\r\nexport default BFSRun;","import {getAdjacent, getRowFromId, getColFromId, getElementByPos, display} from './utils';\r\n\r\n\r\nfunction DFSRun(startRow, startCol, endRow, endCol, orientationalJson) {\r\n    var visited = [];\r\n    function DFSHelper(startRow, startCol, endRow, endCol, path, orientationalJson) {\r\n        let node = getElementByPos(startRow, startCol)\r\n        visited.push(node);\r\n        path.push(node);\r\n        if (startRow === endRow && startCol === endCol) { return path; }\r\n        let adjacents = getAdjacent(startRow, startCol, visited, orientationalJson);\r\n        if (!adjacents.length) { return null; }\r\n        for (let i = 0; i < adjacents.length; i++) { // return in for each doesn't end the loop...\r\n            let pathCopy = path.slice();\r\n            let row = getRowFromId(adjacents[i].id);\r\n            let col = getColFromId(adjacents[i].id);\r\n            let newPath = DFSHelper(row, col, endRow, endCol, pathCopy, orientationalJson);\r\n            if (newPath) {\r\n                return newPath;\r\n            }\r\n        };\r\n    }\r\n    let DFSPath = DFSHelper(startRow, startCol, endRow, endCol, [], orientationalJson);\r\n    if (DFSPath) {\r\n        return {\"visited\": visited, \"path\": DFSPath};\r\n    }\r\n    return {\"visited\": visited, \"path\": []};\r\n}\r\n\r\nexport default DFSRun;","import {getAdjacent, getRowFromId, getColFromId, getElementByPos, display,\r\n        getAllBoxes, biasManhattan} from './utils';\r\n\r\n\r\nfunction A_star_run(startRow, startCol, endRow, endCol, \r\n        orientationalJson, heuristic=biasManhattan, relax=AStarRelax) {\r\n    var visited = []\r\n    var distTo = {}\r\n    // var edgeTo = {} // may not be necessary\r\n    var stack = []\r\n    var source = getElementByPos(startRow, startCol);\r\n    var target = getElementByPos(endRow, endCol);\r\n    let allBoxes = getAllBoxes();\r\n    for (let row = 0; row < allBoxes.length; row++) {\r\n        for (let col = 0; col < allBoxes[0].length; col++) {\r\n            distTo[allBoxes[row][col].id] = Infinity;\r\n            // edgeTo[allBoxes[row][col].id] = null;\r\n        }\r\n    }\r\n    stack.push([source]);\r\n    distTo[source.id] = 0;\r\n    // edgeTo[source.id] = null;\r\n    while (stack.length != 0) {\r\n        let path = stack[0];\r\n        stack.shift();\r\n        let box = path[path.length - 1];\r\n        if (visited.includes(box)) {\r\n            continue;\r\n        }\r\n        visited.push(box);\r\n        if (getRowFromId(box.id) === endRow && getColFromId(box.id) === endCol) {\r\n            return {\"visited\": visited, \"path\": path};\r\n        }\r\n        relax(box, path, heuristic, target, orientationalJson, visited, distTo, stack);\r\n    }\r\n    return {\"visited\": visited, \"path\": []};\r\n}\r\n\r\n\r\nfunction AStarRelax(box, path, heuristic, target, orientationalJson, visited, distTo, stack) {\r\n    let adjacents = getAdjacent(getRowFromId(box.id), getColFromId(box.id), visited, orientationalJson);\r\n    adjacents.forEach(adj => {\r\n        let pathCopy = path.slice();\r\n        let newAdjDist = 1 + distTo[box.id] + heuristic(adj, target);\r\n        let oldAdjDist = distTo[adj.id];\r\n        if (newAdjDist < oldAdjDist) {\r\n            distTo[adj.id] = newAdjDist;\r\n            // edgeTo[adj.id] = box.id;\r\n        }\r\n        pathCopy.push(adj);\r\n        stack.push(pathCopy);\r\n    });\r\n    if (adjacents) {\r\n        stack.sort(function(path1, path2) {\r\n            return distTo[path1[path1.length - 1].id] - distTo[path2[path2.length - 1].id];\r\n        });\r\n    } \r\n}\r\n\r\nexport default A_star_run;","import A_star_run from './A_star'\r\n\r\nfunction DijkstrasRun(startRow, startCol, endRow, endCol, orientationList) {\r\n    return A_star_run(startRow, startCol, endRow, endCol, orientationList, heuristic);\r\n}\r\n\r\nvar heuristic = (box1, box2) => { return 0; };\r\n\r\nexport default DijkstrasRun;","import A_star_run from './A_star';\r\nimport {getAdjacent, getRowFromId, getColFromId} from './utils';\r\n\r\nfunction GreedyRun(startRow, startCol, endRow, endCol, orientationList) {\r\n    return A_star_run(startRow, startCol, endRow, endCol, orientationList, undefined, greedyRelax);\r\n}\r\n\r\nconst greedyRelax = (box, path, heuristic, target, orientationalJson, visited, distTo, stack) => {\r\n    let adjacents = getAdjacent(getRowFromId(box.id), getColFromId(box.id), visited, orientationalJson);\r\n    adjacents.forEach(adj => {\r\n        let pathCopy = path.slice();\r\n        let newAdjDist = heuristic(adj, target);\r\n        let oldAdjDist = distTo[adj.id];\r\n        if (newAdjDist < oldAdjDist) {\r\n            distTo[adj.id] = newAdjDist;\r\n            // edgeTo[adj.id] = box.id;\r\n        }\r\n        pathCopy.push(adj);\r\n        stack.push(pathCopy);\r\n    });\r\n    if (adjacents) {\r\n        stack.sort(function(path1, path2) {\r\n            return distTo[path1[path1.length - 1].id] - distTo[path2[path2.length - 1].id];\r\n        });\r\n    } \r\n}\r\n\r\nexport default GreedyRun;","import BFSRun from './AlgorithmLib/BFS';\r\nimport DFSRun from './AlgorithmLib/DFS';\r\nimport DijkstrasRun from './AlgorithmLib/Dijkstras';\r\nimport A_star_run from './AlgorithmLib/A_star';\r\nimport { orientationListToJson } from './AlgorithmLib/utils';\r\nimport GreedyRun from './AlgorithmLib/GreedyBFS';\r\nimport {setBackgroundColor, hasBackgroundColor} from './AlgorithmLib/utils';\r\n\r\n\r\nexport class Engine {\r\n    constructor(chosenAlg, startRow, startCol, endRow, endCol, orientationOrdered, displayFancy) {\r\n        this.chosenAlgorithm = chosenAlg;\r\n        this.startRow = startRow;\r\n        this.startCol = startCol;\r\n        this.endRow = endRow;\r\n        this.endCol = endCol;\r\n        this.orientationOrdered = orientationOrdered;\r\n        this.displayFancy = displayFancy;\r\n        this.displayFancy = displayFancy;\r\n        this.engineIsRunning = false;\r\n        this.algorithm = () => {\r\n            return chosenAlg(startRow, startCol, endRow, endCol, orientationOrdered);\r\n        }\r\n    }\r\n\r\n    isRunning() {\r\n        return this.engineIsRunning;\r\n    }\r\n    \r\n    async run() {\r\n        this.engineIsRunning = true;\r\n        let queues = this.algorithm();\r\n        await this.display(queues[\"visited\"], queues[\"path\"], this.displayFancy);\r\n        this.engineIsRunning = false;\r\n    }\r\n    \r\n\r\n    async display(queue, path, displayFancy) {\r\n        let ms = 0;\r\n        let r = 64\r\n        let g = 224;\r\n        let b = 208;\r\n\r\n        function sleep(ms) {\r\n            return new Promise(resolve => setTimeout(resolve, ms));\r\n        }\r\n\r\n        async function overlapDisplay(box, r, g, b) {\r\n            /* rgb(64, 187, 224), rgb(56, 164, 197), rgb(48, 134, 160), rgb(48, 106, 160); */\r\n            if (r < 20 || g <= 50 || b <= 50 || hasBackgroundColor(box, \"yellow\")) {\r\n                return;\r\n            }\r\n            box.style.backgroundColor = `rgb(${r}, ${g}, ${b})`;\r\n            await sleep(100);\r\n            await overlapDisplay(box, r - 2, g - 6, b - 6);\r\n        }\r\n\r\n        for (let i = 0; i < queue.length; i++) {\r\n            if (hasBackgroundColor(queue[i], \"white\")) {  // don't override green or red\r\n                setBackgroundColor(queue[i], `rgb(${r}, ${g}, ${b})`);\r\n                if (displayFancy) {\r\n                    setTimeout(function () { overlapDisplay(queue[i], r - 1, g - 3, b - 3); }, 500);\r\n                }\r\n            }\r\n            await sleep(ms);\r\n        }\r\n        let pathMS = 20;\r\n        for (let i = 0; i < path.length; i++) {\r\n            setBackgroundColor(path[i], \"yellow\");\r\n            await sleep(pathMS);\r\n        }\r\n        await sleep(500);\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport function Dijkstras(startRow, startCol, endRow, endCol, orientationList) {\r\n    return DijkstrasRun(startRow, startCol, endRow, endCol, orientationListToJson(orientationList))\r\n}\r\n\r\nexport function A_star(startRow, startCol, endRow, endCol, orientationList) {\r\n    return A_star_run(startRow, startCol, endRow, endCol, orientationListToJson(orientationList));\r\n}\r\n\r\n\r\nexport function DFS(startRow, startCol, endRow, endCol, orientationList) {\r\n    return DFSRun(startRow, startCol, endRow, endCol, orientationListToJson(orientationList));\r\n}\r\n\r\n\r\nexport function BFS(startRow, startCol, endRow, endCol, orientationList) {\r\n    return BFSRun(startRow, startCol, endRow, endCol, orientationListToJson(orientationList));\r\n}\r\n\r\nexport function Greedy(startRow, startCol, endRow, endCol, orientationList) {\r\n    return GreedyRun(startRow, startCol, endRow, endCol, orientationListToJson(orientationList));\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Button = ( { id, color, text, onClick } ) => {\r\n    return (\r\n        <button id={id} style={{backgroundColor: color}} className='btn' \r\n            onClick={onClick}>{text}</button>\r\n    )\r\n}\r\n\r\nButton.defaultProps = {\r\n    color: 'black', \r\n    text: 'Button',\r\n    onClick: () => console.log('nothing happened'),\r\n}\r\n\r\nButton.propTypes = {\r\n    color: PropTypes.string,\r\n    text: PropTypes.string,\r\n    onClick: PropTypes.func\r\n}\r\n\r\nexport default Button\r\n","import {React, useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CheckBox = ({ text, id, handleCheck }) => {\r\n\r\n    var [isChecked, toggleCheck] = useState(false);\r\n\r\n    toggleCheck = () => {\r\n        isChecked = !isChecked;\r\n    }\r\n\r\n    const handleCheckClick = (evt) => {\r\n        toggleCheck();\r\n        handleCheck(isChecked);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input id={id} className=\"checkbox\" type=\"checkbox\" text={text} \r\n                onChange={ (evt) => handleCheckClick(evt) }/> \r\n            <label for={id}>{text}</label>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CheckBox;\r\n","import React from 'react';\r\nimport Button from './Button';\r\nimport CheckBox from './CheckBox';\r\n\r\nconst Controls = ({blueClick, redClick, greenClick, checkClick}) => {\r\n    return (\r\n        <span className=\"span-control\">\r\n            {/* <Button color='purple' text=\"Change Start\"/> \r\n            <Button color='purple' text=\"Change End\"/> */}  {/* To be deployed later*/}\r\n            <Button id=\"blue-control\" color='blue' text=\"Clear Display\" onClick={ blueClick } />\r\n            <Button id=\"red-control\" color='red' text=\"Clear All\" onClick={ redClick } />\r\n            <Button id=\"green-control\" color='green' text=\"Run\" onClick={ greenClick } />\r\n            <CheckBox id=\"show-display\" text=\"Fancy Graphics (may reduce performance)\"\r\n                handleCheck={ checkClick } />\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Controls\r\n","import React from 'react'\r\n\r\nconst Slider = () => {\r\n    return (\r\n        <>  \r\n            <label for=\"speed\">Slow</label>\r\n            <input type=\"range\" min=\"1\" max=\"100\" value=\"50\" class=\"slider\" id=\"speed\"></input>\r\n            <label for=\"speed\">Fast</label>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Slider;\r\n","import {React, useState, useEffect} from 'react';\r\nimport {AlgorithmSelect} from './Select';\r\nimport Orientations from './Orientations';\r\nimport {Dijkstras, DFS, BFS, A_star, Greedy} from '../Engine';\r\nimport { FaTimes } from 'react-icons/fa';\r\nimport Controls from './Controls'\r\nimport Slider from './Slider';\r\nexport var startPos = [10, 10];\r\nexport var endPos = [10, 45];\r\nexport var startingIcon = <FaTimes style={{color: 'red', cursor: 'pointer'}}/>\r\n\r\n\r\nconst nameToAlgs = {\r\n    \"DI\": Dijkstras,\r\n    \"DFS\": DFS,\r\n    \"BFS\": BFS,\r\n    \"A*\": A_star,\r\n    \"GREEDY\": Greedy\r\n  }\r\n\r\nconst defaultOrientation = ['N', 'E', 'S', 'W'];\r\n\r\nconst Settings = ({ blueFunc, redFunc, greenFunc }) => {\r\n\r\n    var [selectedAlg, setSelectedAlg] = useState('DI'); \r\n                                           // TODO: get the first option instead, \r\n                                           // needs to wait after construction\r\n\r\n    var [orientationList, setOrientation] = useState(defaultOrientation);\r\n\r\n    var [willDisplayFancy, toggleFancy] = useState(false);\r\n\r\n    setSelectedAlg = (alg) => {\r\n        selectedAlg = alg;\r\n    }\r\n\r\n    setOrientation = (orientation, number) => {\r\n        let index = parseInt(number);\r\n        orientationList[index - 1] = orientation;\r\n        console.log(orientation);\r\n    }\r\n\r\n    toggleFancy = (boxChecked) => {\r\n        willDisplayFancy = boxChecked;\r\n    }\r\n\r\n    const getSelectedAlg = () => {\r\n        return nameToAlgs[selectedAlg];\r\n    }\r\n\r\n    const handleClearAll = () => {\r\n        redFunc();\r\n    }\r\n\r\n    const handleClearDisplay = () => {\r\n        blueFunc();\r\n    }\r\n\r\n    function handleOnClickRun() {\r\n        // TODO: if not already running:\r\n        greenFunc(getSelectedAlg(), startPos[0], startPos[1], \r\n            endPos[0], endPos[1], orientationList, willDisplayFancy);\r\n    }\r\n\r\n    function handleOnCheck(boxChecked) {\r\n        toggleFancy(boxChecked);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"settings\">\r\n                <span className=\"dir-text\">\r\n                    Please select a pathfinding algorithm: \r\n                </span>\r\n                <AlgorithmSelect onChange={ setSelectedAlg } />\r\n                <hr></hr>\r\n                <br></br>\r\n                <span className=\"dir-text\">\r\n                    Please select orientation tie-break rule:\r\n                </span>\r\n                <Orientations onChange={ setOrientation }/>\r\n                <br></br>\r\n                <span className=\"note\"> Note: NESW will be chosen if \r\n                invalid orientation sequence is selected</span>\r\n                <hr></hr>\r\n                <span className=\"dir-text\">\r\n                    Please select your desired speed: \r\n                </span>\r\n                <Slider />\r\n                <hr></hr>\r\n            </div>\r\n            <br></br>\r\n            <div className='playground'>\r\n                <span className=\"dir-text\">\r\n                    Have Fun!\r\n                </span>\r\n                <Controls \r\n                    blueClick={ handleClearDisplay }\r\n                    redClick={ handleClearAll }  \r\n                    greenClick={ handleOnClickRun } \r\n                    checkClick={ handleOnCheck }\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//TODO: {algorithm} must be function\r\n\r\nexport default Settings;\r\n","import {React, useState, useEffect} from 'react';\nimport Header from './components/Header';\nimport Settings from './components/Settings';\nimport Board from './components/Board';\nimport {Engine} from './Engine';\nimport { FaTimes } from 'react-icons/fa';\nimport {maxRow, maxCol} from './components/Board';\nimport {hasBackgroundColor, setBackgroundColor} from './AlgorithmLib/utils';\nexport var startPos = [10, 10];\nexport var endPos = [10, 45];\nexport var startingIcon = <FaTimes style={{color: 'red', cursor: 'pointer'}}/>\n\n\nfunction App() {\n\n\n  var [engine, setEngine] = useState(null);\n\n    /* will only be called after initial rendering; initalizes engine */\n    useEffect(() => {\n        setEngine(new Engine(null, 0, 0, 0, 0, [], false));\n    }, []);\n\n\n    setEngine = (newEngine) => {\n      engine = newEngine;\n    }\n\n  const clearAll = (func) => {\n    if (!engine.isRunning()) {\n      for (let row = 0; row <= maxRow; row++) {\n        for (let col = 0; col <= maxCol; col++) {\n          let box = document.getElementById(`${row}-${col}`);\n          if (row === startPos[0] && col === startPos[1]) {\n              setBackgroundColor(box, \"green\");\n          } else if (row === endPos[0] && col === endPos[1]) {\n              setBackgroundColor(box, \"red\");\n          } else {\n              setBackgroundColor(box, \"white\");\n          }\n        }\n      }\n    }\n  }\n\n  const clearDisplay = (func) => {\n    if (!engine.isRunning()) {\n      for (let row = 0; row <= maxRow; row++) {\n        for (let col = 0; col <= maxCol; col++) {\n          let box = document.getElementById(`${row}-${col}`);\n          if (row === startPos[0] && col === startPos[1]) {\n              setBackgroundColor(box, \"green\");\n          } else if (row === endPos[0] && col === endPos[1]) {\n              setBackgroundColor(box, \"red\");\n          } else if (hasBackgroundColor(box, \"black\")) {\n              continue;\n          } else {\n              setBackgroundColor(box, \"white\");\n          }\n        }\n      }\n    }\n  }\n\n  async function runEngine(alg, startRow, startCol, endRow, endCol, oriList, willDisplayFancy) {\n    window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });\n    if (!engine.isRunning()) {\n      setBackgroundColor(document.getElementById('green-control'), \"gray\");\n      setEngine(new Engine(alg, startRow, startCol, \n                endRow, endCol, oriList, willDisplayFancy));\n      await engine.run();\n      setBackgroundColor(document.getElementById('green-control'), \"green\");\n    }\n  }\n\n  const canDraw = () => {\n    return !engine.isRunning();\n  }\n\n  return ( // Has to return SINGLE element\n    <div className=\"App\">\n      <Header/>\n      <hr></hr>\n      <Settings blueFunc={clearDisplay} redFunc={clearAll} greenFunc={runEngine} />\n      <Board canDrawOn={canDraw} />\n      <br></br>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}