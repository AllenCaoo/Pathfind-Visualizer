{"version":3,"sources":["components/Header.js","components/Button.js","components/AlgorithmSelect.js","components/Box.js","components/Board.js","components/Settings.js","AlgorithmLib/utils.js","AlgorithmLib/BFS.js","AlgorithmLib/DFS.js","AlgorithmLib/A_star.js","AlgorithmLib/Dijkstras.js","Algorithms.js","components/SubHeader.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Button","color","text","onClick","style","backgroundColor","defaultProps","console","log","AlgorithmSelect","onChange","id","evt","target","value","down","Box","row","col","toggleState","currColor","document","getElementById","onMouseDown","e","preventDefault","handleMouseDown","onMouseUp","onMouseEnter","initBoard","rows","i","maxRow","cells","j","maxCol","startPos","push","endPos","Board","cellSpacing","cellPadding","Settings","nameToAlgs","useState","selectedAlg","changeSelectedAlg","alg","box","getAdjacent","startRow","startCol","soFar","lst","addToQueue","getRowFromId","index","num","charAt","parseInt","getColFromId","search","substring","getElementByPos","A_star_heuristic","targetBox","row1","col1","row2","col2","Math","abs","queue","asList","includes","sleep","ms","Promise","resolve","setTimeout","display","path","a","length","pathMS","getAllBoxes","cols","BFSRun","endRow","endCol","marked","visited","firstBox","shift","node","forEach","newPath","slice","DFSHelper","adjacents","pathCopy","DFSRun","DFSPath","distTo","stack","relax","heuristic","adj","newAdjDist","sort","path1","path2","reset","A_star_run","source","allBoxes","Infinity","box1","box2","DijkstrasRun","Dijkstras","A_star","DFS","BFS","SubHeader","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2afe1448.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <h1>Path Visualizer</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\n// CSS in JS\r\n// const headingStyle = {\r\n//     color: 'red',\r\n//     backgroundColor: 'black'\r\n// }\r\nexport default Header\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Button = ( {color, text, onClick} ) => {\r\n    return (\r\n        <button style={{backgroundColor: color}} className='btn' \r\n            onClick={onClick}>{text}</button>\r\n    )\r\n}\r\n\r\nButton.defaultProps = {\r\n    color: 'black', \r\n    text: 'Button',\r\n    onClick: () => console.log('nothing happened'),\r\n}\r\n\r\nButton.propTypes = {\r\n    color: PropTypes.string,\r\n    text: PropTypes.string,\r\n    onClick: PropTypes.func\r\n}\r\n\r\nexport default Button\r\n","import {React, useState} from 'react'\r\n\r\nconst AlgorithmSelect = ( { color, onChange } ) => {\r\n\r\n\r\n    return (\r\n        <select className='slct' id='algorithms' style={{backgroundColor: color}}\r\n            onChange={(evt) => onChange(evt.target.value)} >\r\n            <option value=\"DI\">Dijkstra's</option>\r\n            <option value=\"A*\">A*</option>\r\n            <option value=\"DFS\">Depth First Search</option>\r\n            <option value=\"BFS\">Breadth First Search</option>\r\n        </select>\r\n    )\r\n}\r\n\r\nAlgorithmSelect.defaultProps = {\r\n    color: 'black',\r\n    onChange: console.log(\"nothing happened\")\r\n}\r\n\r\nexport default AlgorithmSelect\r\n","import {React, useState} from 'react';\r\n\r\nvar down = false;\r\nconst Box = ({row, col, color}) => {\r\n\r\n    var handleMouseDown = (e) => {\r\n        e.preventDefault();\r\n        down = true;\r\n        toggleState();\r\n    }\r\n\r\n    var handleMouseUp = (e) => {\r\n        down = false;\r\n    }\r\n\r\n    var toggleState = () => {\r\n        let currColor = document.getElementById(`${row}-${col}`).style.backgroundColor;\r\n        if (currColor === \"white\") {\r\n            document.getElementById(`${row}-${col}`).style.backgroundColor = \"black\";\r\n        } else if (currColor === \"black\") {\r\n            document.getElementById(`${row}-${col}`).style.backgroundColor = \"white\";\r\n        }\r\n    }\r\n\r\n    return (\r\n        <td \r\n            className=\"box\" \r\n            id={row + \"-\" + col}\r\n            style={{backgroundColor: color}} \r\n            onMouseDown={ (e) => handleMouseDown(e) }   \r\n            onMouseUp={ (e) => handleMouseUp(e) }\r\n            onMouseEnter={ (e) => { if (down) { toggleState(e) } } }\r\n            >\r\n        </td>\r\n    )\r\n}\r\n\r\nBox.defaultProps = {\r\n    color: 'white'\r\n}\r\n\r\nexport default Box\r\n","import React from 'react';\r\nimport Box from './Box';\r\nimport {startPos, endPos, startingIcon} from './Settings';\r\n\r\nexport const maxRow = 16;\r\nexport const maxCol = 50;\r\n\r\nfunction initBoard() {\r\n    let rows = [];\r\n    for(var i = 0; i < maxRow + 1; i++) {\r\n        let cells = [];\r\n        for(var j = 0; j < maxCol + 1; j++) {\r\n            if (i === startPos[0] && j === startPos[1]) {\r\n                cells.push(<Box row={i} col={j} color=\"green\"/>);\r\n            } else if (i === endPos[0] && j === endPos[1]) {\r\n                cells.push(<Box row={i} col={j} color=\"red\"/>);\r\n            } else {\r\n                cells.push(<Box row={i} col={j} />);\r\n            }\r\n        }\r\n        rows.push(<tr>{cells}</tr>);\r\n    }\r\n    return rows;\r\n}\r\n\r\nconst Board = () => {\r\n    return (\r\n        <table className=\"board\" cellSpacing=\"0\" cellPadding=\"0\">\r\n            <tbody>\r\n                {initBoard()}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Board;\r\n","import {React, useState} from 'react';\r\nimport Button from './Button';\r\nimport AlgorithmSelect from './AlgorithmSelect';\r\nimport { FaTimes } from 'react-icons/fa';\r\nimport {maxRow, maxCol} from './Board';\r\nexport var startPos = [8, 8];\r\nexport var endPos = [8, 42];\r\nexport var startingIcon = <FaTimes style={{color: 'red', cursor: 'pointer'}}/>\r\n\r\n\r\nconst Settings = ({nameToAlgs}) => {\r\n\r\n    var [selectedAlg, changeSelectedAlg] = useState('DI'); \r\n                                           // TODO: get the first option instead, \r\n                                           // needs to wait after construction\r\n\r\n    changeSelectedAlg = (alg) => {\r\n        selectedAlg = alg;\r\n        console.log('algorithm changed to: ' + alg);\r\n    }\r\n\r\n    const getSelectedAlg = () => {\r\n        return nameToAlgs[selectedAlg];\r\n    }\r\n\r\n    const clear = () => {\r\n        for (let row = 0; row <= maxRow; row++) {\r\n            for (let col = 0; col <= maxCol; col++) {\r\n                let box = document.getElementById(`${row}-${col}`);\r\n                if (row === startPos[0] && col === startPos[1]) {\r\n                    box.style.backgroundColor = \"green\";\r\n                } else if (row === endPos[0] && col === endPos[1]) {\r\n                    box.style.backgroundColor = \"red\";\r\n                } else {\r\n                    box.style.backgroundColor = \"white\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const clearDisplay = () => {\r\n        for (let row = 0; row <= maxRow; row++) {\r\n            for (let col = 0; col <= maxCol; col++) {\r\n                let box = document.getElementById(`${row}-${col}`);\r\n                if (row === startPos[0] && col === startPos[1]) {\r\n                    box.style.backgroundColor = \"green\";\r\n                } else if (row === endPos[0] && col === endPos[1]) {\r\n                    box.style.backgroundColor = \"red\";\r\n                } else if (box.style.backgroundColor === \"black\") {\r\n                    continue;\r\n                } else {\r\n                    box.style.backgroundColor = \"white\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <AlgorithmSelect onChange={changeSelectedAlg} />\r\n            {/* <Button color='purple' text=\"Change Start\"/> \r\n            <Button color='purple' text=\"Change End\"/> */}  {/* To be deployed later*/}\r\n            <Button color='blue' text=\"Clear Display\" onClick={clearDisplay} />\r\n            <Button color='blue' text=\"Clear All\" onClick={clear} />\r\n            <Button color='red' text=\"Stop (unavailable)\"/>  {/* To be deployed later*/}\r\n            <Button color='green' text=\"Run\" onClick={() => {\r\n                getSelectedAlg()(startPos[0], startPos[1], endPos[0], endPos[1])}\r\n            }/>\r\n        </div>\r\n    )\r\n}\r\n\r\n//TODO: {algorithm} must be function\r\n\r\nexport default Settings;\r\n","import {maxRow, maxCol} from '../components/Board';\r\n\r\n\r\n\r\nexport function getAdjacent(startRow, startCol, soFar) {\r\n    /* Orientation:\r\n            A\r\n        D start B\r\n            C\r\n    A -> B -> C -> D\r\n    */\r\n    let lst = [];\r\n    addToQueue(lst, startRow - 1, startCol, soFar, false);\r\n    addToQueue(lst, startRow, startCol + 1, soFar, false);\r\n    addToQueue(lst, startRow + 1, startCol, soFar, false);\r\n    addToQueue(lst, startRow, startCol - 1, soFar, false);\r\n    return lst;\r\n}\r\n\r\nexport function getRowFromId(id) {\r\n    let index = 0;\r\n    let num = '';\r\n    while (id.charAt(index) != '-') {\r\n        num += id.charAt(index);\r\n        index++;\r\n    }\r\n    return parseInt(num);\r\n}\r\n\r\n\r\nexport function getColFromId(id) {\r\n    let index = id.search('-');\r\n    return parseInt(id.substring(index + 1));\r\n}\r\n\r\n\r\nexport function getElementByPos(row, col) {\r\n    return document.getElementById(`${row}-${col}`); \r\n}\r\n\r\n// TODO: try weight stuff\r\nexport function getDist(box1, box2) {\r\n    if (distBetweenBoxes(box1, box2) != 1) {\r\n        return null; // not connected\r\n    }\r\n    return 1;\r\n}\r\n\r\nexport function A_star_heuristic(box, targetBox) {\r\n    let row1 = getRowFromId(box.id);\r\n    let col1 = getColFromId(box.id);\r\n    let row2 = getRowFromId(targetBox.id);\r\n    let col2 = getColFromId(targetBox.id);\r\n    return 2*(Math.abs(col2 - col1) + Math.abs(row2 - row1));\r\n}\r\n\r\n\r\nexport function distBetweenIds(id1, id2) {\r\n    let row1 = getRowFromId(id1);\r\n    let col1 = getColFromId(id1);\r\n    let row2 = getRowFromId(id2);\r\n    let col2 = getColFromId(id2);\r\n    return Math.sqrt((row1 - row2)**2 + (col1 - col2)**2);\r\n}\r\n\r\n\r\nexport function distBetweenBoxes(box1, box2) {\r\n    let id1 = box1.id;\r\n    let id2 = box2.id;\r\n    let row1 = getRowFromId(id1);\r\n    let col1 = getColFromId(id1);\r\n    let row2 = getRowFromId(id2);\r\n    let col2 = getColFromId(id2);\r\n    return Math.sqrt((row1 - row2)**2 + (col1 - col2)**2);\r\n}\r\n\r\n\r\nfunction addToQueue(queue, row, col, soFar, asList) {\r\n    if (row < 0 || row > maxRow) { return; }\r\n    if (col < 0 || col > maxCol) { return; }\r\n    let box = getElementByPos(row, col);\r\n    if (!soFar.includes(box) && box.style.backgroundColor != \"black\") {\r\n        if (asList) {\r\n            queue.push([box]);\r\n        } else {\r\n            queue.push(box);\r\n        }\r\n    }\r\n}\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport async function display(queue, path) {\r\n    let ms = 0;\r\n    for (let i = 0; i < queue.length; i++) {\r\n        if (queue[i].style.backgroundColor === \"white\") {  // don't override green or red\r\n            queue[i].style.backgroundColor = \"blue\";\r\n        }\r\n        await sleep(ms);\r\n    }\r\n    let pathMS = 20;\r\n    for (let i = 0; i < path.length; i++) {\r\n        path[i].style.backgroundColor = \"yellow\";\r\n        await sleep(pathMS);\r\n    }\r\n    console.log('Displayed');\r\n}\r\n\r\nexport function getAllBoxes() {\r\n    let rows = [];\r\n    for (let row = 0; row <= maxRow; row++) {\r\n        let cols = []\r\n        for (let col = 0; col <= maxCol; col++) {\r\n            cols.push(document.getElementById(`${row}-${col}`));\r\n        }\r\n        rows.push(cols);\r\n    }\r\n    return rows;\r\n}\r\n\r\n\r\n/* Deprecated MinHeap, maybe will be used later\r\nexport class MinHeap {\r\n    constructor(boxes, sourceBox) {\r\n        this.arrayRep = [null]; // 0th position is sentinel\r\n        this.sourceBox = sourceBox;\r\n        boxes.forEach(box => {\r\n            let node = new Node(box, sourceBox);\r\n            if (node === sourceBox) {\r\n                this.arrayRep = [null, node].concat(this.arrayRep.subarray(1, this.arrayRep.length));\r\n            }\r\n            this.addNode(new Node(box, sourceBox));\r\n        });\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.arrayRep.length < 2;\r\n    }\r\n\r\n    compareNodes(node1, node2) {\r\n        return node1.distTo - node2.distTo;\r\n    }\r\n\r\n    parentIndex(index) {\r\n        return parseInt(index / 2);\r\n    }\r\n\r\n    parent(index) {\r\n        return this.parentIndex(index) < 1 ? \r\n                null : this.arrayRep[this.parentIndex(index)];\r\n    }\r\n\r\n    rightChildIndex(index) {\r\n        return index * 2 + 1;\r\n    }\r\n\r\n    rightChild(index) {\r\n        return index * 2 + 1 >= this.arrayRep.length ? \r\n                null : this.arrayRep[this.rightChildIndex(index)];\r\n    }\r\n\r\n    leftChildIndex(index) {\r\n        return index * 2;\r\n    }\r\n\r\n    leftChild(index) {\r\n        return index * 2 >= this.arrayRep.length ? \r\n                null : this.arrayRep[this.leftChildIndex(index)];\r\n    }\r\n\r\n    // Node added to end of arrayRep, swims up //\r\n    addNode(node) {\r\n        this.arrayRep.push(node);\r\n        let k = this.arrayRep.length - 1;\r\n        while (this.parent(k) \r\n                && this.compareNodes(this.parent(k), node) > 0) { // node has lower distTo\r\n            let newIndex = this.parentIndex(k);\r\n            let prevParent = this.parent(k);\r\n            this.arrayRep[newIndex] = node;\r\n            this.arrayRep[k] = prevParent;\r\n            k = newIndex;\r\n        }\r\n    }\r\n\r\n    addBox(box) {\r\n        let node = new Node(box, this.sourceBox);\r\n        this.addNode(node);\r\n    }\r\n\r\n    popSmallest() {\r\n        if (!this.isEmpty) {\r\n            let smallest = this.arrayRep[1];\r\n            this.arrayRep[1] = this.arrayRep[this.arrayRep.length - 1];\r\n            this.arrayRep.pop();\r\n            this.sink(1);\r\n            return smallest;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    sink(index) {\r\n        let node = this.arrayRep[index];\r\n        let leftIndex = this.leftChildIndex(index);\r\n        let rightIndex = this.rightChildIndex(index);\r\n        let left = this.leftChild(index);\r\n        let right = this.rightChild(index)\r\n        if (left && right) {\r\n            if (this.compareNodes(node, left) <= 0 && this.compareNodes(node, right) <= 0) {\r\n                return;\r\n            }\r\n            let cp = this.compareNodes(left, right);\r\n            if (cp <= 0) {\r\n                // sink to the left\r\n                this.arrayRep[leftIndex] = node;\r\n                this.arrayRep[index] = left;\r\n                this.sink(leftIndex);\r\n            } else {\r\n                // sink to the right\r\n                this.arrayRep[rightIndex] = node;\r\n                this.arrayRep[index] = right;\r\n                this.sink(rightIndex);\r\n            }\r\n        } else if (left) {\r\n            let cp = this.compareNodes(node, left);\r\n            if (cp <= 0) {\r\n                return;\r\n            } else {\r\n                // sink to the left\r\n                this.arrayRep[leftIndex] = node;\r\n                this.arrayRep[index] = left;\r\n                this.sink(leftIndex);\r\n            }\r\n        } else if (right) {\r\n            let cp = this.compareNodes(node, right);\r\n            if (cp <= 0) {\r\n                return;\r\n            } else {\r\n                // sink to the left\r\n                this.arrayRep[rightIndex] = node;\r\n                this.arrayRep[index] = right;\r\n                this.sink(rightIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport class Node {\r\n    constructor(box, sourceBox) {\r\n        this.box = box;\r\n        this.sourceBox = sourceBox;\r\n        this.distTo = box === sourceBox ? 0 :Infinity;\r\n    }\r\n}\r\n\r\n*/\r\n","import {getAdjacent, getRowFromId, getColFromId, getElementByPos, display} from './utils';\r\n\r\nfunction BFSRun(startRow, startCol, endRow, endCol) {\r\n    let queue = [];\r\n    let marked = []; // marked will include boxes from scouting adjacents (for performance)\r\n    let visited = []; // visited will not include boxes from scouting adjacents\r\n                     // (so that BFS will stop and not look at adjacents at last node)\r\n    let firstBox = getElementByPos(startRow, startCol)\r\n    queue.push([firstBox]);\r\n    marked.push(firstBox);\r\n    while (queue.length != 0) {\r\n        let path = queue[0];\r\n        queue.shift();\r\n        let node = path[path.length - 1];\r\n        visited.push(node);\r\n        startRow = getRowFromId(node.id);\r\n        startCol = getColFromId(node.id);\r\n        if (startRow === endRow && startCol === endCol) {\r\n            display(visited, path);\r\n            break;\r\n        }\r\n        let adjacents = getAdjacent(startRow, startCol, marked);\r\n        adjacents.forEach(box => {\r\n            let newPath = path.slice();\r\n            newPath.push(box);\r\n            queue.push(newPath);\r\n            marked.push(box);\r\n        });\r\n    }\r\n    display(visited, []);\r\n}\r\n\r\nexport default BFSRun;","import {getAdjacent, getRowFromId, getColFromId, getElementByPos, display} from './utils';\r\n\r\n\r\nvar visited = [];\r\nfunction DFSRun(startRow, startCol, endRow, endCol) {\r\n    let DFSPath = DFSHelper(startRow, startCol, endRow, endCol, []);\r\n    DFSPath ? display(visited, DFSPath) : display(visited, []);\r\n    resetDFS();\r\n}\r\n\r\nfunction DFSHelper(startRow, startCol, endRow, endCol, path) {\r\n    let node = getElementByPos(startRow, startCol)\r\n    visited.push(node);\r\n    path.push(node);\r\n    if (startRow === endRow && startCol === endCol) { return path; }\r\n    let adjacents = getAdjacent(startRow, startCol, visited);\r\n    if (!adjacents.length) { return null; }\r\n    for (let i = 0; i < adjacents.length; i++) { // return in for each doesn't end the loop...\r\n        let pathCopy = path.slice();\r\n        let row = getRowFromId(adjacents[i].id);\r\n        let col = getColFromId(adjacents[i].id);\r\n        let newPath = DFSHelper(row, col, endRow, endCol, pathCopy);\r\n        if (newPath) {\r\n            return newPath;\r\n        }\r\n    };\r\n}\r\n\r\nfunction resetDFS() {\r\n    visited = [];\r\n}\r\n\r\nexport default DFSRun;","import {getAdjacent, getRowFromId, getColFromId, getElementByPos, display,\r\n        getAllBoxes, A_star_heuristic} from './utils';\r\n\r\n\r\nvar visited = []\r\nvar distTo = {}\r\n// var edgeTo = {} // may not be necessary\r\nvar stack = []\r\nfunction A_star_run(startRow, startCol, endRow, endCol, heuristic=A_star_heuristic) {\r\n    var source = getElementByPos(startRow, startCol);\r\n    var target = getElementByPos(endRow, endCol);\r\n    let allBoxes = getAllBoxes();\r\n    for (let row = 0; row < allBoxes.length; row++) {\r\n        for (let col = 0; col < allBoxes[0].length; col++) {\r\n            distTo[allBoxes[row][col].id] = Infinity;\r\n            // edgeTo[allBoxes[row][col].id] = null;\r\n        }\r\n    }\r\n    stack.push([source]);\r\n    distTo[source.id] = 0;\r\n    // edgeTo[source.id] = null;\r\n    while (stack.length != 0) {\r\n        let path = stack[0];\r\n        stack.shift();\r\n        let box = path[path.length - 1];\r\n        if (visited.includes(box)) {\r\n            continue;\r\n        }\r\n        visited.push(box);\r\n        if (getRowFromId(box.id) === endRow && getColFromId(box.id) === endCol) {\r\n            display(visited, path);\r\n            break;\r\n        }\r\n        relax(box, path, heuristic, target);\r\n    }\r\n    display(visited, []);\r\n    reset();\r\n}\r\n\r\n\r\nfunction relax(box, path, heuristic, target) {\r\n    let adjacents = getAdjacent(getRowFromId(box.id), getColFromId(box.id), visited);\r\n    adjacents.forEach(adj => {\r\n        let pathCopy = path.slice();\r\n        let newAdjDist = 1 + distTo[box.id] + heuristic(adj, target);\r\n        let oldAdjDist = distTo[adj.id];\r\n        if (newAdjDist < oldAdjDist) {\r\n            distTo[adj.id] = newAdjDist;\r\n            // edgeTo[adj.id] = box.id;\r\n        }\r\n        pathCopy.push(adj);\r\n        stack.push(pathCopy);\r\n    });\r\n    if (adjacents) {\r\n        stack.sort(function(path1, path2) {\r\n            return distTo[path1[path1.length - 1].id] - distTo[path2[path2.length - 1].id];\r\n        });\r\n    } \r\n}\r\n\r\nfunction reset() {\r\n    visited = [];\r\n    distTo = {};\r\n    stack = []\r\n}\r\n\r\nexport default A_star_run;","import A_star_run from './A_star'\r\n\r\n\r\nvar visited = []\r\nvar distTo = {}\r\n// var edgeTo = {} // may not be necessary\r\nvar stack = []\r\nvar heuristic = (box1, box2) => { return 0; };\r\nfunction DijkstrasRun(startRow, startCol, endRow, endCol) {\r\n    A_star_run(startRow, startCol, endRow, endCol, heuristic=heuristic);\r\n}\r\n\r\nexport default DijkstrasRun;","import BFSRun from './AlgorithmLib/BFS';\r\nimport DFSRun from './AlgorithmLib/DFS';\r\nimport DijkstrasRun from './AlgorithmLib/Dijkstras';\r\nimport A_star_run from './AlgorithmLib/A_star';\r\nvar running = false;\r\n\r\nexport function Dijkstras(startRow, startCol, endRow, endCol) {\r\n    running = true;\r\n    console.log(\"Running Dijkstras\");\r\n    DijkstrasRun(startRow, startCol, endRow, endCol)\r\n    running = false;\r\n}\r\n\r\nexport function A_star(startRow, startCol, endRow, endCol) {\r\n    running = true;\r\n    console.log(\"Running A*\");\r\n    A_star_run(startRow, startCol, endRow, endCol);\r\n    running = false;\r\n}\r\n\r\n\r\nexport function DFS(startRow, startCol, endRow, endCol) {\r\n    running = true;\r\n    console.log(\"Running DFS\");\r\n    DFSRun(startRow, startCol, endRow, endCol);\r\n    running = false;\r\n}\r\n\r\n\r\nexport function BFS(startRow, startCol, endRow, endCol) {\r\n    running = true;\r\n    console.log(\"Running BFS\");\r\n    BFSRun(startRow, startCol, endRow, endCol);\r\n    running = false;\r\n}\r\n","import React from 'react'\r\n\r\nconst SubHeader = ({ text, color }) => {\r\n    return (\r\n        <header className=\"subheader\" style={{color: color}}>\r\n            <h4>{text}</h4>\r\n        </header>\r\n    )\r\n}\r\n\r\nSubHeader.defaultProps = {\r\n    color: 'black',\r\n    text: ''\r\n}\r\n\r\nexport default SubHeader;\r\n","import Header from './components/Header';\nimport Settings from './components/Settings';\nimport Board from './components/Board';\nimport {DFS, BFS, Dijkstras, A_star} from './Algorithms';\nimport SubHeader from './components/SubHeader';\n\nfunction App() {\n\n  const nameToAlgs = {\n    \"DI\": Dijkstras,\n    \"DFS\": DFS,\n    \"BFS\": BFS,\n    \"A*\": A_star\n  }\n\n  return ( // Has to return SINGLE element\n    <div className=\"App\">\n      <Header/>\n      <SubHeader text=\"Page is currently under construction. Some features will be unavailable.\" \n        color=\"purple\"/>\n      <Settings nameToAlgs={nameToAlgs} />\n      <SubHeader text=\"Click on boxes to create walls!\" color=\"black\" />\n      <Board/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}