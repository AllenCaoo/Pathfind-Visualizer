{"version":3,"sources":["components/Header.js","components/Select.js","components/Orientations.js","components/Box.js","components/Board.js","components/Button.js","components/Controls.js","components/Settings.js","AlgorithmLib/utils.js","AlgorithmLib/BFS.js","AlgorithmLib/DFS.js","AlgorithmLib/A_star.js","AlgorithmLib/Dijkstras.js","Algorithms.js","components/SubHeader.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","AlgorithmSelect","color","onChange","id","style","backgroundColor","evt","target","value","OrientationSelect","selected","number","defaultValue","defaultProps","Orientations","down","Box","row","col","toggleState","currColor","document","getElementById","onMouseDown","e","preventDefault","handleMouseDown","onMouseUp","onMouseEnter","initBoard","rows","i","maxRow","cells","j","maxCol","startPos","push","endPos","Board","cellSpacing","cellPadding","Button","text","onClick","console","log","Controls","clearDisplay","clearAll","handleOnClickRun","Settings","nameToAlgs","useState","selectedAlg","changeSelectedAlg","orientationList","changeOrientation","alg","orientation","index","parseInt","box","window","scrollTo","top","body","scrollHeight","behavior","defaultOrientation","getAdjacent","startRow","startCol","soFar","orientationalJson","getKeyByValue","object","Object","keys","find","key","oriToRowCol","lst","coords","addToQueue","orientationListToJson","json","length","getRowFromId","num","charAt","getColFromId","search","substring","getElementByPos","biasManhattan","targetBox","row1","col1","row2","col2","Math","abs","queue","asList","includes","sleep","ms","Promise","resolve","setTimeout","display","path","a","pathMS","getAllBoxes","cols","BFSRun","endRow","endCol","marked","visited","firstBox","shift","node","forEach","newPath","slice","DFSHelper","adjacents","pathCopy","DFSRun","DFSPath","distTo","stack","relax","heuristic","adj","newAdjDist","sort","path1","path2","reset","A_star_run","source","allBoxes","Infinity","box1","box2","DijkstrasRun","Dijkstras","A_star","DFS","BFS","SubHeader","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e061a8a8.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <h1>Path Visualizer</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\n// CSS in JS\r\n// const headingStyle = {\r\n//     color: 'red',\r\n//     backgroundColor: 'black'\r\n// }\r\nexport default Header\r\n","import {React, useState} from 'react'\r\n\r\nexport const AlgorithmSelect = ( { color, onChange } ) => {\r\n\r\n\r\n    return (\r\n        <span className=\"span-alg-slct\" >\r\n            <select className='alg-slct' id='algorithms' style={{backgroundColor: color}}\r\n                onChange={(evt) => onChange(evt.target.value)} >\r\n                <option value=\"DI\">Dijkstra's</option>\r\n                <option value=\"A*\">A*</option>\r\n                <option value=\"DFS\">Depth First Search</option>\r\n                <option value=\"BFS\">Breadth First Search</option>\r\n            </select>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport const OrientationSelect = ( { color, selected, number, onChange } ) => {\r\n    \r\n    return (\r\n        <select className='ori-slct' id={`orientation-${number}`} style={{backgroundColor: color}} \r\n            defaultValue={selected} onChange={(evt) => onChange(evt.target.value, number)}>\r\n            <option value=\"N\">North</option>\r\n            <option value=\"E\">East</option>\r\n            <option value=\"S\">South</option>\r\n            <option value=\"W\">West</option>\r\n        </select>\r\n    )\r\n}\r\n\r\nAlgorithmSelect.defaultProps = {\r\n    color: 'black'\r\n}\r\n\r\n","import React from 'react';\r\nimport {OrientationSelect} from './Select';\r\n\r\nconst Orientations = ({onChange}) => {\r\n    return (\r\n        <span className=\"orientations\">\r\n            <span className=\"circle-number\">1</span>\r\n            <OrientationSelect color=\"#008080\" selected=\"N\" number='1' onChange={onChange} />\r\n            <span className=\"circle-number\">2</span>\r\n            <OrientationSelect color=\"#008080\" selected=\"E\" number='2' onChange={onChange} />\r\n            <span className=\"circle-number\">3</span>\r\n            <OrientationSelect color=\"#008080\" selected=\"S\" number='3' onChange={onChange} />\r\n            <span className=\"circle-number\">4</span>\r\n            <OrientationSelect color=\"#008080\" selected=\"W\" number='4' onChange={onChange} />  \r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Orientations;\r\n","import {React, useState} from 'react';\r\n\r\nvar down = false;\r\nconst Box = ({row, col, color}) => {\r\n\r\n    var handleMouseDown = (e) => {\r\n        e.preventDefault();\r\n        down = true;\r\n        toggleState();\r\n    }\r\n\r\n    var handleMouseUp = (e) => {\r\n        down = false;\r\n    }\r\n\r\n    var toggleState = () => {\r\n        let currColor = document.getElementById(`${row}-${col}`).style.backgroundColor;\r\n        if (currColor === \"white\") {\r\n            document.getElementById(`${row}-${col}`).style.backgroundColor = \"black\";\r\n        } else if (currColor === \"black\") {\r\n            document.getElementById(`${row}-${col}`).style.backgroundColor = \"white\";\r\n        }\r\n    }\r\n\r\n    return (\r\n        <td \r\n            className=\"box\" \r\n            id={row + \"-\" + col}\r\n            style={{backgroundColor: color}} \r\n            onMouseDown={ (e) => handleMouseDown(e) }   \r\n            onMouseUp={ (e) => handleMouseUp(e) }\r\n            onMouseEnter={ (e) => { if (down) { toggleState(e) } } }\r\n            >\r\n        </td>\r\n    )\r\n}\r\n\r\nBox.defaultProps = {\r\n    color: 'white'\r\n}\r\n\r\nexport default Box\r\n","import React from 'react';\r\nimport Box from './Box';\r\nimport {startPos, endPos, startingIcon} from './Settings';\r\n\r\nexport const maxRow = 20;\r\nexport const maxCol = 55;\r\n\r\nfunction initBoard() {\r\n    let rows = [];\r\n    for(var i = 0; i < maxRow + 1; i++) {\r\n        let cells = [];\r\n        for(var j = 0; j < maxCol + 1; j++) {\r\n            if (i === startPos[0] && j === startPos[1]) {\r\n                cells.push(<Box row={i} col={j} color=\"green\"/>);\r\n            } else if (i === endPos[0] && j === endPos[1]) {\r\n                cells.push(<Box row={i} col={j} color=\"red\"/>);\r\n            } else {\r\n                cells.push(<Box row={i} col={j} />);\r\n            }\r\n        }\r\n        rows.push(<tr>{cells}</tr>);\r\n    }\r\n    return rows;\r\n}\r\n\r\nconst Board = () => {\r\n    return (\r\n        <table className=\"board\" cellSpacing=\"0\" cellPadding=\"0\">\r\n            <tbody>\r\n                {initBoard()}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Button = ( {color, text, onClick} ) => {\r\n    return (\r\n        <button style={{backgroundColor: color}} className='btn' \r\n            onClick={onClick}>{text}</button>\r\n    )\r\n}\r\n\r\nButton.defaultProps = {\r\n    color: 'black', \r\n    text: 'Button',\r\n    onClick: () => console.log('nothing happened'),\r\n}\r\n\r\nButton.propTypes = {\r\n    color: PropTypes.string,\r\n    text: PropTypes.string,\r\n    onClick: PropTypes.func\r\n}\r\n\r\nexport default Button\r\n","import React from 'react'\r\nimport Button from './Button'\r\n\r\nconst Controls = ({clearDisplay, clearAll, handleOnClickRun}) => {\r\n    return (\r\n        <span className=\"span-control\">\r\n            {/* <Button color='purple' text=\"Change Start\"/> \r\n            <Button color='purple' text=\"Change End\"/> */}  {/* To be deployed later*/}\r\n            <Button color='blue' text=\"Clear Display\" onClick={clearDisplay} />\r\n            <Button color='red' text=\"Clear All\" onClick={clearAll} />\r\n            <Button color='green' text=\"Run\" onClick={() => {\r\n                handleOnClickRun();}\r\n            }/>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Controls\r\n","import {React, useState} from 'react';\r\nimport {AlgorithmSelect} from './Select';\r\nimport Orientations from './Orientations';\r\nimport { FaTimes } from 'react-icons/fa';\r\nimport {maxRow, maxCol} from './Board';\r\nimport Controls from './Controls'\r\nexport var startPos = [10, 10];\r\nexport var endPos = [10, 45];\r\nexport var startingIcon = <FaTimes style={{color: 'red', cursor: 'pointer'}}/>\r\n\r\n\r\nconst Settings = ({nameToAlgs}) => {\r\n\r\n    var [selectedAlg, changeSelectedAlg] = useState('DI'); \r\n                                           // TODO: get the first option instead, \r\n                                           // needs to wait after construction\r\n\r\n    var [orientationList, changeOrientation] = useState(['N', 'E', 'S', 'W']);\r\n\r\n    changeSelectedAlg = (alg) => {\r\n        selectedAlg = alg;\r\n    }\r\n\r\n    changeOrientation = (orientation, number) => {\r\n        let index = parseInt(number);\r\n        orientationList[index - 1] = orientation;\r\n        console.log(orientation);\r\n    }\r\n\r\n    const getSelectedAlg = () => {\r\n        return nameToAlgs[selectedAlg];\r\n    }\r\n\r\n    const clearAll = () => {\r\n        for (let row = 0; row <= maxRow; row++) {\r\n            for (let col = 0; col <= maxCol; col++) {\r\n                let box = document.getElementById(`${row}-${col}`);\r\n                if (row === startPos[0] && col === startPos[1]) {\r\n                    box.style.backgroundColor = \"green\";\r\n                } else if (row === endPos[0] && col === endPos[1]) {\r\n                    box.style.backgroundColor = \"red\";\r\n                } else {\r\n                    box.style.backgroundColor = \"white\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const clearDisplay = () => {\r\n        for (let row = 0; row <= maxRow; row++) {\r\n            for (let col = 0; col <= maxCol; col++) {\r\n                let box = document.getElementById(`${row}-${col}`);\r\n                if (row === startPos[0] && col === startPos[1]) {\r\n                    box.style.backgroundColor = \"green\";\r\n                } else if (row === endPos[0] && col === endPos[1]) {\r\n                    box.style.backgroundColor = \"red\";\r\n                } else if (box.style.backgroundColor === \"black\") {\r\n                    continue;\r\n                } else {\r\n                    box.style.backgroundColor = \"white\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleOnClickRun() {\r\n        // TODO: if not already running:\r\n        window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });\r\n        getSelectedAlg()(startPos[0], startPos[1], endPos[0], endPos[1], orientationList);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <span className=\"dir-text\">\r\n                    Please select a pathfinding algorithm: \r\n                </span>\r\n                <AlgorithmSelect onChange={ changeSelectedAlg } />\r\n                <br></br>\r\n                <br></br>\r\n                <span className=\"dir-text\">\r\n                    Please select tie-breaking orientation:\r\n                </span>\r\n                <Orientations onChange={changeOrientation}/>\r\n                <br></br>\r\n                <span className=\"note\"> Note: NESW will be chosen if \r\n                invalid orientation sequence is selected</span>\r\n            </div>\r\n            <br></br>\r\n            <div className='d'>\r\n                <span className=\"dir-text\">\r\n                    Have Fun!\r\n                </span>\r\n                <Controls \r\n                    clearDisplay={ clearDisplay } \r\n                    clearAll={ clearAll } \r\n                    handleOnClickRun={ handleOnClickRun } \r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//TODO: {algorithm} must be function\r\n\r\nexport default Settings;\r\n","import {maxRow, maxCol} from '../components/Board';\r\n\r\nvar numOrientations = 4;\r\nvar defaultOrientation = {\r\n    'N': 1,\r\n    'E': 2,\r\n    'S': 3,\r\n    'W': 4\r\n}\r\n\r\n\r\nexport function getAdjacent(startRow, startCol, soFar, orientationalJson) {\r\n    /* Orientation:\r\n            A\r\n        D start B\r\n            C\r\n    A -> B -> C -> D\r\n    */\r\n   /* If invalid orientation, then orientation is NESW */\r\n   function getKeyByValue(object, value) {\r\n    return Object.keys(object).find(key => object[key] === value);\r\n    }\r\n  \r\n    var oriToRowCol = {\r\n        'N': [startRow - 1, startCol],\r\n        'E': [startRow, startCol + 1],\r\n        'S': [startRow + 1, startCol],\r\n        'W': [startRow, startCol - 1]\r\n    }\r\n    let lst = [];\r\n    for (let i = 1; i <= numOrientations; i++) {\r\n        let ori = getKeyByValue(orientationalJson, i);\r\n        let coords = oriToRowCol[ori];\r\n        addToQueue(lst, coords[0], coords[1], soFar, false);\r\n    }\r\n    return lst;\r\n}\r\n\r\nexport function orientationListToJson(orientationList) {\r\n    let json = []\r\n    for (let i = 1; i <= orientationList.length; i++) {\r\n        json[orientationList[i - 1]] = i;\r\n    }\r\n    if (Object.keys(json).length < numOrientations) {\r\n        return defaultOrientation;\r\n    } else {\r\n        return json;\r\n    }\r\n}\r\n\r\nexport function getRowFromId(id) {\r\n    let index = 0;\r\n    let num = '';\r\n    while (id.charAt(index) != '-') {\r\n        num += id.charAt(index);\r\n        index++;\r\n    }\r\n    return parseInt(num);\r\n}\r\n\r\n\r\nexport function getColFromId(id) {\r\n    let index = id.search('-');\r\n    return parseInt(id.substring(index + 1));\r\n}\r\n\r\n\r\nexport function getElementByPos(row, col) {\r\n    return document.getElementById(`${row}-${col}`); \r\n}\r\n\r\n// TODO: try weight stuff\r\nexport function getDist(box1, box2) {\r\n    if (distBetweenBoxes(box1, box2) != 1) {\r\n        return null; // not connected\r\n    }\r\n    return 1;\r\n}\r\n\r\n/* Bias in wanting puts more weight on difference in rows */\r\nexport function biasManhattan(box, targetBox) {\r\n    let row1 = getRowFromId(box.id);\r\n    let col1 = getColFromId(box.id);\r\n    let row2 = getRowFromId(targetBox.id);\r\n    let col2 = getColFromId(targetBox.id);\r\n    return 2*(Math.abs(col2 - col1) + 5*Math.abs(row2 - row1)); \r\n    // scaled by 3 for better results\r\n}\r\n\r\n\r\nexport function distBetweenIds(id1, id2) {\r\n    let row1 = getRowFromId(id1);\r\n    let col1 = getColFromId(id1);\r\n    let row2 = getRowFromId(id2);\r\n    let col2 = getColFromId(id2);\r\n    return Math.sqrt((row1 - row2)**2 + (col1 - col2)**2);\r\n}\r\n\r\n\r\nexport function distBetweenBoxes(box1, box2) {\r\n    let id1 = box1.id;\r\n    let id2 = box2.id;\r\n    let row1 = getRowFromId(id1);\r\n    let col1 = getColFromId(id1);\r\n    let row2 = getRowFromId(id2);\r\n    let col2 = getColFromId(id2);\r\n    return Math.sqrt((row1 - row2)**2 + (col1 - col2)**2);\r\n}\r\n\r\n\r\nfunction addToQueue(queue, row, col, soFar, asList) {\r\n    if (row < 0 || row > maxRow) { return; }\r\n    if (col < 0 || col > maxCol) { return; }\r\n    let box = getElementByPos(row, col);\r\n    if (!soFar.includes(box) && box.style.backgroundColor != \"black\") {\r\n        if (asList) {\r\n            queue.push([box]);\r\n        } else {\r\n            queue.push(box);\r\n        }\r\n    }\r\n}\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport async function display(queue, path) {\r\n    let ms = 0;\r\n    for (let i = 0; i < queue.length; i++) {\r\n        if (queue[i].style.backgroundColor === \"white\") {  // don't override green or red\r\n            queue[i].style.backgroundColor = \"blue\";\r\n        }\r\n        await sleep(ms);\r\n    }\r\n    let pathMS = 20;\r\n    for (let i = 0; i < path.length; i++) {\r\n        path[i].style.backgroundColor = \"yellow\";\r\n        await sleep(pathMS);\r\n    }\r\n    console.log('Displayed');\r\n}\r\n\r\nexport function getAllBoxes() {\r\n    let rows = [];\r\n    for (let row = 0; row <= maxRow; row++) {\r\n        let cols = []\r\n        for (let col = 0; col <= maxCol; col++) {\r\n            cols.push(document.getElementById(`${row}-${col}`));\r\n        }\r\n        rows.push(cols);\r\n    }\r\n    return rows;\r\n} \r\n\r\n/* Deprecated MinHeap, maybe will be used later\r\nexport class MinHeap {\r\n    constructor(boxes, sourceBox) {\r\n        this.arrayRep = [null]; // 0th position is sentinel\r\n        this.sourceBox = sourceBox;\r\n        boxes.forEach(box => {\r\n            let node = new Node(box, sourceBox);\r\n            if (node === sourceBox) {\r\n                this.arrayRep = [null, node].concat(this.arrayRep.subarray(1, this.arrayRep.length));\r\n            }\r\n            this.addNode(new Node(box, sourceBox));\r\n        });\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.arrayRep.length < 2;\r\n    }\r\n\r\n    compareNodes(node1, node2) {\r\n        return node1.distTo - node2.distTo;\r\n    }\r\n\r\n    parentIndex(index) {\r\n        return parseInt(index / 2);\r\n    }\r\n\r\n    parent(index) {\r\n        return this.parentIndex(index) < 1 ? \r\n                null : this.arrayRep[this.parentIndex(index)];\r\n    }\r\n\r\n    rightChildIndex(index) {\r\n        return index * 2 + 1;\r\n    }\r\n\r\n    rightChild(index) {\r\n        return index * 2 + 1 >= this.arrayRep.length ? \r\n                null : this.arrayRep[this.rightChildIndex(index)];\r\n    }\r\n\r\n    leftChildIndex(index) {\r\n        return index * 2;\r\n    }\r\n\r\n    leftChild(index) {\r\n        return index * 2 >= this.arrayRep.length ? \r\n                null : this.arrayRep[this.leftChildIndex(index)];\r\n    }\r\n\r\n    // Node added to end of arrayRep, swims up //\r\n    addNode(node) {\r\n        this.arrayRep.push(node);\r\n        let k = this.arrayRep.length - 1;\r\n        while (this.parent(k) \r\n                && this.compareNodes(this.parent(k), node) > 0) { // node has lower distTo\r\n            let newIndex = this.parentIndex(k);\r\n            let prevParent = this.parent(k);\r\n            this.arrayRep[newIndex] = node;\r\n            this.arrayRep[k] = prevParent;\r\n            k = newIndex;\r\n        }\r\n    }\r\n\r\n    addBox(box) {\r\n        let node = new Node(box, this.sourceBox);\r\n        this.addNode(node);\r\n    }\r\n\r\n    popSmallest() {\r\n        if (!this.isEmpty) {\r\n            let smallest = this.arrayRep[1];\r\n            this.arrayRep[1] = this.arrayRep[this.arrayRep.length - 1];\r\n            this.arrayRep.pop();\r\n            this.sink(1);\r\n            return smallest;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    sink(index) {\r\n        let node = this.arrayRep[index];\r\n        let leftIndex = this.leftChildIndex(index);\r\n        let rightIndex = this.rightChildIndex(index);\r\n        let left = this.leftChild(index);\r\n        let right = this.rightChild(index)\r\n        if (left && right) {\r\n            if (this.compareNodes(node, left) <= 0 && this.compareNodes(node, right) <= 0) {\r\n                return;\r\n            }\r\n            let cp = this.compareNodes(left, right);\r\n            if (cp <= 0) {\r\n                // sink to the left\r\n                this.arrayRep[leftIndex] = node;\r\n                this.arrayRep[index] = left;\r\n                this.sink(leftIndex);\r\n            } else {\r\n                // sink to the right\r\n                this.arrayRep[rightIndex] = node;\r\n                this.arrayRep[index] = right;\r\n                this.sink(rightIndex);\r\n            }\r\n        } else if (left) {\r\n            let cp = this.compareNodes(node, left);\r\n            if (cp <= 0) {\r\n                return;\r\n            } else {\r\n                // sink to the left\r\n                this.arrayRep[leftIndex] = node;\r\n                this.arrayRep[index] = left;\r\n                this.sink(leftIndex);\r\n            }\r\n        } else if (right) {\r\n            let cp = this.compareNodes(node, right);\r\n            if (cp <= 0) {\r\n                return;\r\n            } else {\r\n                // sink to the left\r\n                this.arrayRep[rightIndex] = node;\r\n                this.arrayRep[index] = right;\r\n                this.sink(rightIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport class Node {\r\n    constructor(box, sourceBox) {\r\n        this.box = box;\r\n        this.sourceBox = sourceBox;\r\n        this.distTo = box === sourceBox ? 0 :Infinity;\r\n    }\r\n}\r\n\r\n*/\r\n","import {getAdjacent, getRowFromId, getColFromId, getElementByPos, display} from './utils';\r\n\r\nfunction BFSRun(startRow, startCol, endRow, endCol, orientationList) {\r\n    let queue = [];\r\n    let marked = []; // marked will include boxes from scouting adjacents (for performance)\r\n    let visited = []; // visited will not include boxes from scouting adjacents\r\n                     // (so that BFS will stop and not look at adjacents at last node)\r\n    let firstBox = getElementByPos(startRow, startCol)\r\n    queue.push([firstBox]);\r\n    marked.push(firstBox);\r\n    while (queue.length != 0) {\r\n        let path = queue[0];\r\n        queue.shift();\r\n        let node = path[path.length - 1];\r\n        visited.push(node);\r\n        startRow = getRowFromId(node.id);\r\n        startCol = getColFromId(node.id);\r\n        if (startRow === endRow && startCol === endCol) {\r\n            display(visited, path);\r\n            break;\r\n        }\r\n        let adjacents = getAdjacent(startRow, startCol, marked, orientationList);\r\n        adjacents.forEach(box => {\r\n            let newPath = path.slice();\r\n            newPath.push(box);\r\n            queue.push(newPath);\r\n            marked.push(box);\r\n        });\r\n    }\r\n    display(visited, []);\r\n}\r\n\r\nexport default BFSRun;","import {getAdjacent, getRowFromId, getColFromId, getElementByPos, display} from './utils';\r\n\r\n\r\nvar visited = [];\r\nfunction DFSRun(startRow, startCol, endRow, endCol, orientationalJson) {\r\n    let DFSPath = DFSHelper(startRow, startCol, endRow, endCol, [], orientationalJson);\r\n    DFSPath ? display(visited, DFSPath) : display(visited, []);\r\n    resetDFS();\r\n}\r\n\r\nfunction DFSHelper(startRow, startCol, endRow, endCol, path, orientationalJson) {\r\n    let node = getElementByPos(startRow, startCol)\r\n    visited.push(node);\r\n    path.push(node);\r\n    if (startRow === endRow && startCol === endCol) { return path; }\r\n    let adjacents = getAdjacent(startRow, startCol, visited, orientationalJson);\r\n    if (!adjacents.length) { return null; }\r\n    for (let i = 0; i < adjacents.length; i++) { // return in for each doesn't end the loop...\r\n        let pathCopy = path.slice();\r\n        let row = getRowFromId(adjacents[i].id);\r\n        let col = getColFromId(adjacents[i].id);\r\n        let newPath = DFSHelper(row, col, endRow, endCol, pathCopy, orientationalJson);\r\n        if (newPath) {\r\n            return newPath;\r\n        }\r\n    };\r\n}\r\n\r\nfunction resetDFS() {\r\n    visited = [];\r\n}\r\n\r\nexport default DFSRun;","import {getAdjacent, getRowFromId, getColFromId, getElementByPos, display,\r\n        getAllBoxes, biasManhattan} from './utils';\r\n\r\n\r\nvar visited = []\r\nvar distTo = {}\r\n// var edgeTo = {} // may not be necessary\r\nvar stack = []\r\nfunction A_star_run(startRow, startCol, endRow, endCol, orientationalJson, heuristic=biasManhattan) {\r\n    var source = getElementByPos(startRow, startCol);\r\n    var target = getElementByPos(endRow, endCol);\r\n    let allBoxes = getAllBoxes();\r\n    for (let row = 0; row < allBoxes.length; row++) {\r\n        for (let col = 0; col < allBoxes[0].length; col++) {\r\n            distTo[allBoxes[row][col].id] = Infinity;\r\n            // edgeTo[allBoxes[row][col].id] = null;\r\n        }\r\n    }\r\n    stack.push([source]);\r\n    distTo[source.id] = 0;\r\n    // edgeTo[source.id] = null;\r\n    while (stack.length != 0) {\r\n        let path = stack[0];\r\n        stack.shift();\r\n        let box = path[path.length - 1];\r\n        if (visited.includes(box)) {\r\n            continue;\r\n        }\r\n        visited.push(box);\r\n        if (getRowFromId(box.id) === endRow && getColFromId(box.id) === endCol) {\r\n            display(visited, path);\r\n            break;\r\n        }\r\n        relax(box, path, heuristic, target, orientationalJson);\r\n    }\r\n    display(visited, []);\r\n    reset();\r\n}\r\n\r\n\r\nfunction relax(box, path, heuristic, target, orientationList) {\r\n    let adjacents = getAdjacent(getRowFromId(box.id), getColFromId(box.id), visited, orientationList);\r\n    adjacents.forEach(adj => {\r\n        let pathCopy = path.slice();\r\n        let newAdjDist = 1 + distTo[box.id] + heuristic(adj, target);\r\n        let oldAdjDist = distTo[adj.id];\r\n        if (newAdjDist < oldAdjDist) {\r\n            distTo[adj.id] = newAdjDist;\r\n            // edgeTo[adj.id] = box.id;\r\n        }\r\n        pathCopy.push(adj);\r\n        stack.push(pathCopy);\r\n    });\r\n    if (adjacents) {\r\n        stack.sort(function(path1, path2) {\r\n            return distTo[path1[path1.length - 1].id] - distTo[path2[path2.length - 1].id];\r\n        });\r\n    } \r\n}\r\n\r\nfunction reset() {\r\n    visited = [];\r\n    distTo = {};\r\n    stack = []\r\n}\r\n\r\nexport default A_star_run;","import A_star_run from './A_star'\r\n\r\n\r\nvar visited = []\r\nvar distTo = {}\r\n// var edgeTo = {} // may not be necessary\r\nvar stack = []\r\nvar heuristic = (box1, box2) => { return 0; };\r\nfunction DijkstrasRun(startRow, startCol, endRow, endCol, orientationList) {\r\n    A_star_run(startRow, startCol, endRow, endCol, orientationList, heuristic=heuristic);\r\n}\r\n\r\nexport default DijkstrasRun;","import BFSRun from './AlgorithmLib/BFS';\r\nimport DFSRun from './AlgorithmLib/DFS';\r\nimport DijkstrasRun from './AlgorithmLib/Dijkstras';\r\nimport A_star_run from './AlgorithmLib/A_star';\r\nimport { orientationListToJson } from './AlgorithmLib/utils';\r\nvar running = false;\r\n\r\nexport function Dijkstras(startRow, startCol, endRow, endCol, orientationList) {\r\n    running = true;\r\n    console.log(\"Running Dijkstras\");\r\n    DijkstrasRun(startRow, startCol, endRow, endCol, orientationListToJson(orientationList))\r\n    running = false;\r\n}\r\n\r\nexport function A_star(startRow, startCol, endRow, endCol, orientationList) {\r\n    running = true;\r\n    console.log(\"Running A*\");\r\n    A_star_run(startRow, startCol, endRow, endCol, orientationListToJson(orientationList));\r\n    running = false;\r\n}\r\n\r\n\r\nexport function DFS(startRow, startCol, endRow, endCol, orientationList) {\r\n    running = true;\r\n    console.log(\"Running DFS\");\r\n    DFSRun(startRow, startCol, endRow, endCol, orientationListToJson(orientationList));\r\n    running = false;\r\n}\r\n\r\n\r\nexport function BFS(startRow, startCol, endRow, endCol, orientationList) {\r\n    running = true;\r\n    console.log(\"Running BFS\");\r\n    BFSRun(startRow, startCol, endRow, endCol, orientationListToJson(orientationList));\r\n    running = false;\r\n}\r\n","import React from 'react'\r\n\r\nconst SubHeader = ({ text, color }) => {\r\n    return (\r\n        <header className=\"subheader\" style={{color: color}}>\r\n            <h4>{text}</h4>\r\n        </header>\r\n    )\r\n}\r\n\r\nSubHeader.defaultProps = {\r\n    color: 'black',\r\n    text: ''\r\n}\r\n\r\nexport default SubHeader;\r\n","import Header from './components/Header';\nimport Settings from './components/Settings';\nimport Board from './components/Board';\nimport {DFS, BFS, Dijkstras, A_star} from './Algorithms';\nimport SubHeader from './components/SubHeader';\n\nfunction App() {\n\n  const nameToAlgs = {\n    \"DI\": Dijkstras,\n    \"DFS\": DFS,\n    \"BFS\": BFS,\n    \"A*\": A_star\n  }\n\n  return ( // Has to return SINGLE element\n    <div className=\"App\">\n      <Header/>\n      <Settings nameToAlgs={nameToAlgs} />\n      <Board/>\n      <br></br>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}